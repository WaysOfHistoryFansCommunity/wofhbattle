{"meta":{"feedback_varyings":null,"interface_block_bindings":null,"sampler_default_values":[["decalTex",0],["emissionTex",8],["fogOfWar",6],["heightTex",2],["maskTex",9],["metalnessMap",10],["normalMap",4],["normalTex",1],["opacityTex",5],["shadowTex",7],["specularRoughnessTex",3]],"shader_parameters":[["vertex","vec3","cameraPosition",1],["fragment","vec4","colorFactor",1],["fragment","vec3","darkColor",1],["fragment","sampler2D","decalTex",1],["fragment","sampler2D","emissionTex",1],["fragment","vec4","fogColor",1],["fragment","vec2","fogNearFar",1],["fragment","sampler2D","fogOfWar",1],["fragment","float","fowInterpolationParameter",1],["vertex","vec4","fowMapScalePosition",1],["vertex","sampler2D","heightTex",1],["fragment","vec4","lightColorInvMaxEmission",1],["fragment","vec3","lightDirection",1],["vertex","vec3","lightDirection",1],["fragment","vec4","maskColor",1],["fragment","sampler2D","maskTex",1],["fragment","sampler2D","metalnessMap",1],["vertex","sampler2D","normalMap",1],["fragment","sampler2D","normalTex",1],["fragment","float","normalZScale",1],["fragment","sampler2D","opacityTex",1],["fragment","vec2","shadowBiasScaleMax",1],["fragment","vec4","shadowMapSize",1],["fragment","sampler2D","shadowTex",1],["fragment","float","specularPower",1],["fragment","sampler2D","specularRoughnessTex",1],["fragment","vec2","submarineBottomDiff",1],["fragment","vec3","submarineColorMultiplier",1],["fragment","float","sunFarFadeFactor",1],["vertex","mat4","sunMatrix",1],["fragment","vec4","texFromTo",1],["fragment","float","texInterpolationParameter",1],["fragment","vec2","v2paramStatic",9],["vertex","vec2","v2paramStatic",9],["fragment","vec2","v2param",11],["vertex","vec2","v2param",11],["vertex","mat4","viewProjectionMatrix",1],["fragment","vec2","worldTerrainSize",1]],"vertex_attributes":[[0,"vec2","vertexData"]]},"stages":{"fragment":["#version 300 es","precision mediump float;","precision mediump sampler3D;","#define transformFeedback(varName)","#if (__VERSION__ >= 330) || (__VERSION__ == 300)","#define vertAttrib(Num, Type, Name) layout(location = Num) in Type Name","#else","#define vertAttrib(Num, Type, Name) attribute Type Name","#endif","#if __VERSION__ <= 120","#define VAR_SMOOTH_IN(type, name) varying type name","#define VAR_FLAT_IN(type, name) varying type name","#define VAR_SMOOTH_OUT(type, name) varying type name","#define VAR_FLAT_OUT(type, name) varying type name","#define SAMPLE_2D(_smplr, _tc) (texture2D(_smplr, _tc))","#define SAMPLE_2D_GRAD(_smplr, _tc, Fx, Fy) (texture2D(_smplr, _tc))","#define SAMPLE_CUBE(_smplr, _tc) (textureCube(_smplr, _tc))","#else","#define VAR_SMOOTH_IN(type, name) smooth in type name","#define VAR_FLAT_IN(type, name) flat in type name","#define VAR_SMOOTH_OUT(type, name) smooth out type name","#define VAR_FLAT_OUT(type, name) flat out type name","#define SAMPLE_2D(_smplr, _tc) (texture(_smplr, _tc))","#define SAMPLE_2D_GRAD(_smplr, _tc, Fx, Fy) (textureGrad(_smplr, _tc, dFdx(Fx), dFdy(Fy)))","#define SAMPLE_CUBE(_smplr, _tc) (texture(_smplr, _tc))","#endif","#if (__VERSION__ < 130) || defined(NO_RG)","#define NM_XY ra","#else","#define NM_XY rg","#endif","#ifdef FOG","uniform vec2 fogNearFar;","uniform vec4 fogColor;","float getFogFactor(in float zEye)","{","float fogNear = fogNearFar[0];","float fogFar = fogNearFar[1];","return clamp((zEye - fogNear) / (fogFar - fogNear), 0.0, 1.0) * fogColor.a;","}","vec3 addFogFactor(in vec3 color, in float fogFactor)","{","return mix(color, fogColor.rgb, fogFactor);","}","vec3 addFog(in vec3 color, in float zEye)","{","float fogFactor = getFogFactor(zEye);","return addFogFactor(color, fogFactor);","}","#else","float getFogFactor(in float zEye)","{","return 0.0;","}","vec3 addFogFactor(in vec3 color, in float fogFactor)","{","return color;","}","vec3 addFog(in vec3 color, in float zEye)","{","return color;","}","#endif","#ifdef FOG_OF_WAR","uniform sampler2D fogOfWar ;","uniform float fowInterpolationParameter;","float getFogOfWarFactor(in vec2 tc)","{","const float border0 = -0.001;","const float border1 = 1.001;","float clampTo0 = step(border0, tc.x) * (1.0 - step(border1, tc.x)) * step(border0, tc.y) * (1.0 - step(border1, tc.y));","vec2 rg = texture(fogOfWar, tc).rg * clampTo0;","return mix(rg.r, rg.g, fowInterpolationParameter);","}","#else","float getFogOfWarFactor(in vec2 tc) { return 1.0; }","#endif","float istep(float edge, float x)","{","return step(x, edge);","}","float plate(float edge1, float edge2, float x)","{","return step(edge1, x) * step(x, edge2);","}","float textureBorder1(sampler2D s, vec2 uv)","{","float inTexture = plate(0.0, 1.0, uv.x) * plate(0.0, 1.0, uv.y);","return inTexture * texture(s, uv).r + (1.0 - inTexture);","}","float textureCompare(sampler2D depth, vec2 uv, float zReceiver, float bias)","{","float shadowDepth = textureBorder1(depth, uv);","if (((shadowDepth + bias) < zReceiver) && (zReceiver <= 1.0)) return 1.0;","return 0.0;","}","uniform float sunFarFadeFactor;","float farShadowFade(in float uvy)","{","return (1.0 - smoothstep(sunFarFadeFactor, 1.0, uvy));","}","uniform vec2 shadowBiasScaleMax;","float shadowBias(vec3 normal, vec3 toSun)","{","return max(shadowBiasScaleMax.x * (1.0 - dot(normal, toSun)), shadowBiasScaleMax.y);","}","#if defined(SHADOWED_PCSS)","#define BLOCKER_SEARCH_NUM_SAMPLES 16","#define PCF_NUM_SAMPLES 64","#define LIGHT_SIZE_UV 0.01","#define NEAR_PLANE 1.0","float PenumbraSize(float zReceiver, float zBlocker)","{","return (zReceiver - zBlocker) / zBlocker;","}","float PCF_Filter(sampler2D depth, vec2 uv, float zReceiver, float filterRadiusUV, float bias)","{","vec2 poissonDisk[64];","poissonDisk[0] = vec2(-0.613392, 0.617481);","poissonDisk[1] = vec2(0.170019, -0.040254);","poissonDisk[2] = vec2(-0.299417, 0.791925);","poissonDisk[3] = vec2(0.645680, 0.493210);","poissonDisk[4] = vec2(-0.651784, 0.717887);","poissonDisk[5] = vec2(0.421003, 0.027070);","poissonDisk[6] = vec2(-0.817194, -0.271096);","poissonDisk[7] = vec2(-0.705374, -0.668203);","poissonDisk[8] = vec2(0.977050, -0.108615);","poissonDisk[9] = vec2(0.063326, 0.142369);","poissonDisk[10] = vec2(0.203528, 0.214331);","poissonDisk[11] = vec2(-0.667531, 0.326090);","poissonDisk[12] = vec2(-0.098422, -0.295755);","poissonDisk[13] = vec2(-0.885922, 0.215369);","poissonDisk[14] = vec2(0.566637, 0.605213);","poissonDisk[15] = vec2(0.039766, -0.396100);","poissonDisk[16] = vec2(0.751946, 0.453352);","poissonDisk[17] = vec2(0.078707, -0.715323);","poissonDisk[18] = vec2(-0.075838, -0.529344);","poissonDisk[19] = vec2(0.724479, -0.580798);","poissonDisk[20] = vec2(0.222999, -0.215125);","poissonDisk[21] = vec2(-0.467574, -0.405438);","poissonDisk[22] = vec2(-0.248268, -0.814753);","poissonDisk[23] = vec2(0.354411, -0.887570);","poissonDisk[24] = vec2(0.175817, 0.382366);","poissonDisk[25] = vec2(0.487472, -0.063082);","poissonDisk[26] = vec2(-0.084078, 0.898312);","poissonDisk[27] = vec2(0.488876, -0.783441);","poissonDisk[28] = vec2(0.470016, 0.217933);","poissonDisk[29] = vec2(-0.696890, -0.549791);","poissonDisk[30] = vec2(-0.149693, 0.605762);","poissonDisk[31] = vec2(0.034211, 0.979980);","poissonDisk[32] = vec2(0.503098, -0.308878);","poissonDisk[33] = vec2(-0.016205, -0.872921);","poissonDisk[34] = vec2(0.385784, -0.393902);","poissonDisk[35] = vec2(-0.146886, -0.859249);","poissonDisk[36] = vec2(0.643361, 0.164098);","poissonDisk[37] = vec2(0.634388, -0.049471);","poissonDisk[38] = vec2(-0.688894, 0.007843);","poissonDisk[39] = vec2(0.464034, -0.188818);","poissonDisk[40] = vec2(-0.440840, 0.137486);","poissonDisk[41] = vec2(0.364483, 0.511704);","poissonDisk[42] = vec2(0.034028, 0.325968);","poissonDisk[43] = vec2(0.099094, -0.308023);","poissonDisk[44] = vec2(0.693960, -0.366253);","poissonDisk[45] = vec2(0.678884, -0.204688);","poissonDisk[46] = vec2(0.001801, 0.780328);","poissonDisk[47] = vec2(0.145177, -0.898984);","poissonDisk[48] = vec2(0.062655, -0.611866);","poissonDisk[49] = vec2(0.315226, -0.604297);","poissonDisk[50] = vec2(-0.780145, 0.486251);","poissonDisk[51] = vec2(-0.371868, 0.882138);","poissonDisk[52] = vec2(0.200476, 0.494430);","poissonDisk[53] = vec2(-0.494552, -0.711051);","poissonDisk[54] = vec2(0.612476, 0.705252);","poissonDisk[55] = vec2(-0.578845, -0.768792);","poissonDisk[56] = vec2(-0.772454, -0.090976);","poissonDisk[57] = vec2(0.504440, 0.372295);","poissonDisk[58] = vec2(0.155736, 0.065157);","poissonDisk[59] = vec2(0.391522, 0.849605);","poissonDisk[60] = vec2(-0.620106, -0.328104);","poissonDisk[61] = vec2(0.789239, -0.419965);","poissonDisk[62] = vec2(-0.545396, 0.538133);","poissonDisk[63] = vec2(-0.178564, -0.596057);","float sum = 0.0;","for ( int i = 0; i < PCF_NUM_SAMPLES; ++i )","{","vec2 offset = poissonDisk[i] * filterRadiusUV;","sum += textureCompare(depth, uv + offset, zReceiver, bias);","}","return sum / float(PCF_NUM_SAMPLES);","}","vec2 FindBlocker(sampler2D depth, vec2 uv, float zReceiver, float bias)","{","vec2 poissonDisk[16];","poissonDisk[0] = vec2 ( -0.94201624, -0.39906216 );","poissonDisk[1] = vec2 ( 0.94558609, -0.76890725 );","poissonDisk[2] = vec2 ( -0.094184101, -0.92938870 );","poissonDisk[3] = vec2 ( 0.34495938, 0.29387760 );","poissonDisk[4] = vec2 ( -0.91588581, 0.45771432 );","poissonDisk[5] = vec2 ( -0.81544232, -0.87912464 );","poissonDisk[6] = vec2 ( -0.38277543, 0.27676845 );","poissonDisk[7] = vec2 ( 0.97484398, 0.75648379 );","poissonDisk[8] = vec2 ( 0.44323325, -0.97511554 );","poissonDisk[9] = vec2 ( 0.53742981, -0.47373420 );","poissonDisk[10] = vec2 ( -0.26496911, -0.41893023 );","poissonDisk[11] = vec2 ( 0.79197514, 0.19090188 );","poissonDisk[12] = vec2 ( -0.24188840, 0.99706507 );","poissonDisk[13] = vec2 ( -0.81409955, 0.91437590 );","poissonDisk[14] = vec2 ( 0.19984126, 0.78641367 );","poissonDisk[15] = vec2 ( 0.14383161, -0.14100790 );","float avgBlockerDepth = 0.0;","float numBlockers = 0.0;","float searchWidth = LIGHT_SIZE_UV * (zReceiver - float(NEAR_PLANE)) / zReceiver;","float blockerSum = 0.0;","for (int i = 0; i < BLOCKER_SEARCH_NUM_SAMPLES; ++i) {","vec2 uvDisplaced = uv + poissonDisk[i] * searchWidth;","float shadowMapDepth = textureBorder1(depth, uvDisplaced);","if (((shadowMapDepth + bias) < zReceiver) && !(zReceiver > 1.0)) {","blockerSum += shadowMapDepth;","numBlockers++;","}","}","avgBlockerDepth = blockerSum / numBlockers;","return vec2(avgBlockerDepth, numBlockers);","}","float getShadow(in sampler2D depth, in vec2 uv, in float zReceiver, in float bias, in int cascadeId)","{","vec2 fb = FindBlocker(depth, uv, zReceiver, bias);","float avgBlockerDepth = fb.x;","float numBlockers = fb.y;","if( numBlockers < 1.0 ) return 0.0;","float penumbraRatio = PenumbraSize(zReceiver, avgBlockerDepth);","float filterRadiusUV = penumbraRatio * LIGHT_SIZE_UV * NEAR_PLANE / zReceiver;","float shadowValue = (PCF_Filter(depth, uv, zReceiver, filterRadiusUV, bias));","return shadowValue * farShadowFade(uv.y);","}","#elif defined(SHADOWED_PCF)","uniform vec4 shadowMapSize;","float textureShadowLerp(in sampler2D depths, in vec2 uv, in float zReceiver, in float bias)","{","vec2 texelSize = shadowMapSize.zw;","vec2 centroidUV;","vec2 f = modf(uv * shadowMapSize.xy, centroidUV);","centroidUV *= texelSize;","float lb = textureCompare(depths, centroidUV + texelSize * vec2(0.0, 0.0), zReceiver, bias);","float lt = textureCompare(depths, centroidUV + texelSize * vec2(0.0, 1.0), zReceiver, bias);","float rb = textureCompare(depths, centroidUV + texelSize * vec2(1.0, 0.0), zReceiver, bias);","float rt = textureCompare(depths, centroidUV + texelSize * vec2(1.0, 1.0), zReceiver, bias);","float a = mix(lb, lt, f.y);","float b = mix(rb, rt, f.y);","float c = mix(a, b, f.x);","return c;","}","#ifndef CSM_COUNT","#define CSM_COUNT 1","#endif","float getShadow(in sampler2D depth, in vec2 uv, in float zReceiver, in float bias, in int cascadeId)","{","#if CSM_COUNT > 1","uv.x *= 0.25;","uv.x += 0.25 * float(cascadeId);","#endif","vec2 texelSize = shadowMapSize.zw;","float shadow = 0.0;","for (int x = -1; x <= 1; ++x) {","for (int y = -1; y <= 1; ++y) {","vec2 uv1 = uv + vec2(x, y) * texelSize;","shadow += textureShadowLerp(depth, uv1, zReceiver, bias);","}","}","return (shadow / float(9.0)) * farShadowFade(uv.y);","}","#elif defined(SHADOWED_PLAIN)","float getShadow(in sampler2D depth, in vec2 uv, in float zReceiver, in float bias, in int cascadeId)","{","return textureCompare(depth, uv, zReceiver, bias) * farShadowFade(uv.y);","}","#else","float getShadow(sampler2D depth, vec2 uv, float zReceiver, float bias) { return 0.0; }","#endif","#if defined(SHADOWED_PLAIN) || defined(SHADOWED_PCF) || defined(SHADOWED_PCSS)","uniform sampler2D shadowTex ;","float getBiasedShadow(in vec3 normal, in vec3 sunVertexPosition, in vec3 lightDirection, in int cascadeId)","{","float bias = shadowBias(normal, lightDirection);","vec3 smc = (sunVertexPosition + vec3(1.0, 1.0, 1.0)) * 0.5;","return getShadow(shadowTex, smc.xy, smc.z, bias, cascadeId);","}","float getWaterBiasedShadow(in vec3 normal, in vec3 sunVertexPosition, in vec3 lightDirection, in float distortionFactor)","{","vec3 shadowMapCoord = (sunVertexPosition.xyz + vec3(1.0, 1.0, 1.0)) * 0.5;","float bias = shadowBias(normal, lightDirection);","vec2 tc = shadowMapCoord.xy + normal.xy * distortionFactor * 0.1;","return getShadow(shadowTex, tc, shadowMapCoord.z, bias, 0 );","}","void addShadowSpec(in vec3 normal, in vec3 sunVertexPosition, in vec3 lightDirection, in vec3 darkColor, in int cascadeId, inout vec3 sunColor, inout vec3 totalSpecular)","{","float shadow = getBiasedShadow(normal, sunVertexPosition, lightDirection, cascadeId);","sunColor = mix(sunColor, darkColor, shadow);","totalSpecular *= 1.0 - shadow;","}","void addShadow(in vec3 normal, in vec3 sunVertexPosition, in vec3 lightDirection, in vec3 darkColor, in int cascadeId, inout vec3 sunColor)","{","float shadow = getBiasedShadow(normal, sunVertexPosition, lightDirection, cascadeId);","sunColor = mix(sunColor, darkColor, shadow);","}","#else","void addShadowSpec(in vec3 normal, in vec3 sunVertexPosition, in vec3 lightDirection, in vec3 darkColor, in int cascadeId, inout vec3 sunColor, inout vec3 totalSpecular) {}","void addShadow(in vec3 normal, in vec3 sunVertexPosition, in vec3 lightDirection, in vec3 darkColor, in int cascadeId, inout vec3 sunColor) {}","#endif","#define PI 3.14159265359","float DistributionGGX(vec3 N, vec3 H, float roughness)","{","float a      = roughness*roughness;","float a2     = a*a;","float NdotH  = max(dot(N, H), 0.0);","float NdotH2 = NdotH*NdotH;","float num   = a2;","float denom = (NdotH2 * (a2 - 1.0) + 1.0);","denom = PI * denom * denom;","return num / max(denom, 0.0000001);","}","float GeometrySchlickGGX(float NdotV, float roughness)","{","float r = (roughness + 1.0);","float k = (r*r) / 8.0;","float num   = NdotV;","float denom = NdotV * (1.0 - k) + k;","return num / denom;","}","float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness)","{","float NdotV = max(dot(N, V), 0.0);","float NdotL = max(dot(N, L), 0.0);","float ggx2  = GeometrySchlickGGX(NdotV, roughness);","float ggx1  = GeometrySchlickGGX(NdotL, roughness);","return ggx1 * ggx2;","}","vec3 fresnelSchlick(float cosTheta, vec3 F0)","{","float invCosTheta = 1.0 - cosTheta;","float pow5 = invCosTheta * invCosTheta * invCosTheta * invCosTheta * invCosTheta;","return F0 + (1.0 - F0) * pow5;","}","vec3 fresnelSchlickRoughness(float cosTheta, vec3 F0, float roughness)","{","float invCosTheta = 1.0 - cosTheta;","float pow5 = invCosTheta * invCosTheta * invCosTheta * invCosTheta * invCosTheta;","return F0 + (max(vec3(1.0 - roughness), F0) - F0) * pow5;","}","vec3 metallicPbrColor(","in float roughness,","in float metallic,","in float translucency,","in vec3 albedo,","in vec3 lightColor,","in vec3 viewDirection,","in vec3 lightDirection,","in vec3 normal",")","{","vec3 F0 = vec3(0.04);","F0 = mix(F0, albedo, metallic);","vec3 H = normalize(viewDirection + lightDirection);","float NDF = DistributionGGX(normal, H, roughness);","float G   = GeometrySmith(normal, viewDirection, lightDirection, roughness);","vec3 F    = fresnelSchlick(max(dot(H, viewDirection), 0.0), F0);","vec3 kS = F;","vec3 kD = vec3(1.0) - kS;","kD *= 1.0 - metallic;","float NdotL = dot(normal, lightDirection);","NdotL = mix(max(NdotL, 0.0), abs(NdotL), translucency);","vec3 numerator    = NDF * G * F;","float denominator = 4.0 * max(dot(normal, viewDirection), 0.0) * NdotL;","vec3 spec\t\t  = numerator / max(denominator, 0.000001);","return (kD * albedo / PI + spec) * lightColor * NdotL;","}","vec3 metallicPbrSunColor(","in float roughness,","in float metallic,","in float translucency,","in float emission,","in vec3 albedo,","in vec3 darkColor,","in vec3 lightColor,","in vec3 envmapSunFactor,","in vec3 envmapShadowFactor,","in vec3 envmapSpecularFactor,","in vec3 sunSpecularFactor,","in vec3 viewDirection,","in vec3 lightDirection,","in vec3 normal,","in vec3 sunVertexPosition,","in sampler2D specularBrdfLut,","in samplerCube irradianceMap,","in samplerCube envMap,","in int cascadeId",")","{","#if defined(SHADOWED_PLAIN) || defined(SHADOWED_PCF) || defined(SHADOWED_PCSS)","float shadowFactor = 1.0 - getBiasedShadow(normal, sunVertexPosition, lightDirection, cascadeId);","#else","float shadowFactor = 1.0;","#endif","vec3 F0 = vec3(0.04);","F0 = mix(F0, albedo, metallic);","vec3 H = normalize(viewDirection + lightDirection);","float NDF = DistributionGGX(normal, H, roughness);","float G   = GeometrySmith(normal, viewDirection, lightDirection, roughness);","vec3 F    = fresnelSchlick(max(dot(H, viewDirection), 0.0), F0);","vec3 kS = F;","vec3 kD = vec3(1.0) - kS;","kD *= 1.0 - metallic;","float NdotL = dot(normal, lightDirection);","NdotL = mix(max(NdotL, 0.0), abs(NdotL), translucency);","vec3 numerator    = NDF * G * F;","float denominator = 4.0 * max(dot(normal, viewDirection), 0.0) * NdotL;","vec3 spec = numerator / max(denominator, 0.000001);","spec *= sunSpecularFactor * shadowFactor;","vec3 dimLightColor = lightColor * NdotL * shadowFactor;","vec3 diffuseColor = kD * albedo / PI;","vec3 Lo = diffuseColor * max(0.0, 1.0 - emission) * dimLightColor + albedo * emission + spec * dimLightColor;","F = fresnelSchlickRoughness(max(dot(normal, viewDirection), 0.0), F0, roughness);","kD = 1.0 - F;","kD *= 1.0 - metallic;","vec3 irradianceSampleDir = normal.xzy;","irradianceSampleDir.z = -irradianceSampleDir.z;","vec3 irradiance = texture(irradianceMap, irradianceSampleDir).rgb * mix(envmapShadowFactor, envmapSunFactor, NdotL * shadowFactor);","vec3 diffuse = irradiance * albedo;","const float MAX_REFLECTION_LOD = 4.0;","vec3 R = reflect(-viewDirection, normal);","R = R.xzy;","R.z = -R.z;","vec3 prefilteredColor = textureLod(envMap, R,  roughness * MAX_REFLECTION_LOD).rgb;","vec2 brdf  = texture(specularBrdfLut, vec2(max(dot(normal, viewDirection), 0.0), roughness)).rg;","vec3 specular = prefilteredColor * (F * brdf.x + brdf.y) * shadowFactor * envmapSpecularFactor;","vec3 ambient = kD * diffuse + specular;","return Lo + ambient;","}","vec3 waterPbrSunColor(","in float roughness,","in float metallic,","in float specularFactor,","in float distortionFactor,","in vec3 albedo,","in vec3 lightColor,","in vec3 darkColor,","in vec3 envmapSunFactor,","in vec3 viewDirection,","in vec3 lightDirection,","in vec3 normal,","in vec3 sunVertexPosition,","in sampler2D specularBrdfLut,","in samplerCube irradianceMap,","in vec3 reflectionColor)","{","#if defined(SHADOWED_PLAIN) || defined(SHADOWED_PCF) || defined(SHADOWED_PCSS)","float shadowFactor = 1.0 - getWaterBiasedShadow(normal, sunVertexPosition, lightDirection, distortionFactor);","#else","float shadowFactor = 1.0;","#endif","vec3 F0 = vec3(0.04);","F0 = mix(F0, albedo, metallic);","vec3 H = normalize(viewDirection + lightDirection);","float NDF = DistributionGGX(normal, H, roughness);","float G   = GeometrySmith(normal, viewDirection, lightDirection, roughness);","vec3 F    = fresnelSchlick(max(dot(H, viewDirection), 0.0), F0);","vec3 kS = F;","vec3 kD = vec3(1.0) - kS;","kD *= 1.0 - metallic;","float NdotL = max(dot(normal, lightDirection), 0.0);","vec3 numerator    = NDF * G * F;","float denominator = 4.0 * max(dot(normal, viewDirection), 0.0) * NdotL;","vec3 spec = numerator / max(denominator, 0.000001);","spec *= shadowFactor * specularFactor;","vec3 dimLightColor = lightColor * NdotL * shadowFactor;","vec3 diffuseColor = kD * albedo / PI;","vec3 Lo = diffuseColor * dimLightColor + spec * dimLightColor;","F = fresnelSchlickRoughness(max(dot(normal, viewDirection), 0.0), F0, roughness);","kD = 1.0 - F;","kD *= 1.0 - metallic;","vec3 irradianceSampleDir = normal.xzy;","irradianceSampleDir.z = -irradianceSampleDir.z;","vec3 irradiance = texture(irradianceMap, irradianceSampleDir).rgb * mix(darkColor, envmapSunFactor, NdotL * shadowFactor);","vec3 diffuse = irradiance * albedo;","const float MAX_REFLECTION_LOD = 4.0;","vec3 R = reflect(-viewDirection, normal);","R = R.xzy;","R.z = -R.z;","vec3 prefilteredColor = reflectionColor;","vec2 brdf  = texture(specularBrdfLut, vec2(max(dot(normal, viewDirection), 0.0), roughness)).rg;","vec3 specular = prefilteredColor * (F * brdf.x + brdf.y);","specular = mix(specular * darkColor, specular, shadowFactor) * albedo;","vec3 ambient = kD * diffuse + specular;","return Lo + ambient;","}","vec3 blinnPhongColor(","in float specular,","in float specularPower,","in float translucency,","in float emission,","in vec3 albedo,","in vec3 darkColor,","in vec3 lightColor,","in vec3 viewDirection,","in vec3 lightDirection,","in vec3 normal,","in vec3 sunVertexPosition,","in int cascadeId",")","{","vec3 reflection = -reflect(lightDirection, normal);","float fRdotV = max(0.0, dot(normalize(reflection), viewDirection));","vec3 totalSpecular = lightColor * pow(fRdotV, specularPower) * specular;","float LDdotN = dot(lightDirection, normal);","float lightIntensity = clamp(mix(max(LDdotN, 0.0), abs(LDdotN), translucency), 0.0, 1.0);","vec3 sunColor = mix(darkColor, lightColor, lightIntensity);","addShadowSpec(normal, sunVertexPosition, lightDirection, darkColor, cascadeId, sunColor, totalSpecular);","vec3 outDiffuseColor = albedo * sunColor;","outDiffuseColor = outDiffuseColor * max(0.0, 1.0 - emission) + albedo * emission;","return outDiffuseColor + totalSpecular;","}","#define transformFeedback(varName)","#if (__VERSION__ >= 330) || (__VERSION__ == 300)","#define vertAttrib(Num, Type, Name) layout(location = Num) in Type Name","#else","#define vertAttrib(Num, Type, Name) attribute Type Name","#endif","#if __VERSION__ <= 120","#define VAR_SMOOTH_IN(type, name) varying type name","#define VAR_FLAT_IN(type, name) varying type name","#define VAR_SMOOTH_OUT(type, name) varying type name","#define VAR_FLAT_OUT(type, name) varying type name","#define SAMPLE_2D(_smplr, _tc) (texture2D(_smplr, _tc))","#define SAMPLE_2D_GRAD(_smplr, _tc, Fx, Fy) (texture2D(_smplr, _tc))","#define SAMPLE_CUBE(_smplr, _tc) (textureCube(_smplr, _tc))","#else","#define VAR_SMOOTH_IN(type, name) smooth in type name","#define VAR_FLAT_IN(type, name) flat in type name","#define VAR_SMOOTH_OUT(type, name) smooth out type name","#define VAR_FLAT_OUT(type, name) flat out type name","#define SAMPLE_2D(_smplr, _tc) (texture(_smplr, _tc))","#define SAMPLE_2D_GRAD(_smplr, _tc, Fx, Fy) (textureGrad(_smplr, _tc, dFdx(Fx), dFdy(Fy)))","#define SAMPLE_CUBE(_smplr, _tc) (texture(_smplr, _tc))","#endif","#if (__VERSION__ < 130) || defined(NO_RG)","#define NM_XY ra","#else","#define NM_XY rg","#endif","vec3 unpackRgNormal(in vec2 xy)","{","xy = xy * 2.0 - 1.0;","return vec3(xy, sqrt(max(0.0, 1.0 - dot(xy, xy))));","}","vec3 sampleNormalmap(in sampler2D tex, in vec2 tc)","{","return unpackRgNormal(SAMPLE_2D(tex, tc).NM_XY);","}","vec3 downsample13(in sampler2D tex, in vec2 tc, in vec2 texelSize)","{","vec3 s1  = SAMPLE_2D(tex, tc + texelSize * vec2(-1.0, -1.0)).rgb;","vec3 s2  = SAMPLE_2D(tex, tc + texelSize * vec2( 0.0, -1.0)).rgb;","vec3 s3  = SAMPLE_2D(tex, tc + texelSize * vec2( 1.0, -1.0)).rgb;","vec3 s4  = SAMPLE_2D(tex, tc + texelSize * vec2(-0.5, -0.5)).rgb;","vec3 s5  = SAMPLE_2D(tex, tc + texelSize * vec2( 0.5, -0.5)).rgb;","vec3 s6  = SAMPLE_2D(tex, tc + texelSize * vec2(-1.0,  0.0)).rgb;","vec3 s7  = SAMPLE_2D(tex, tc).rgb;","vec3 s8  = SAMPLE_2D(tex, tc + texelSize * vec2( 1.0,  0.0)).rgb;","vec3 s9  = SAMPLE_2D(tex, tc + texelSize * vec2(-0.5,  0.5)).rgb;","vec3 s10 = SAMPLE_2D(tex, tc + texelSize * vec2( 0.5,  0.5)).rgb;","vec3 s11 = SAMPLE_2D(tex, tc + texelSize * vec2(-1.0,  1.0)).rgb;","vec3 s12 = SAMPLE_2D(tex, tc + texelSize * vec2( 0.0,  1.0)).rgb;","vec3 s13 = SAMPLE_2D(tex, tc + texelSize * vec2( 1.0,  1.0)).rgb;","return","(s4 + s5 + s9 + s10) * 0.125 +","(s1 + s2 + s7 + s6) * 0.03125 +","(s2 + s3 + s8 + s7) * 0.03125 +","(s6 + s7 + s12 + s11) * 0.03125 +","(s7 + s8 + s13 + s12) * 0.03125;","}","vec3 downsample4(in sampler2D tex, in vec2 tc, in vec2 texelSize)","{","vec4 displacement = texelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);","vec3 s =","SAMPLE_2D(tex, tc + displacement.xy).rgb +","SAMPLE_2D(tex, tc + displacement.zy).rgb +","SAMPLE_2D(tex, tc + displacement.xw).rgb +","SAMPLE_2D(tex, tc + displacement.zw).rgb;","return s * 0.25;","}","vec3 magTent(in sampler2D tex, in vec2 uv, in vec2 texelSize, in float sampleScale)","{","vec4 displacement = texelSize.xyxy * vec4(1.0, 1.0, -1.0, 0.0) * sampleScale;","vec3 result =","SAMPLE_2D(tex, uv - displacement.xy).rgb +","SAMPLE_2D(tex, uv - displacement.wy).rgb * 2.0 +","SAMPLE_2D(tex, uv - displacement.zy).rgb +","SAMPLE_2D(tex, uv + displacement.zw).rgb * 2.0 +","SAMPLE_2D(tex, uv).rgb * 4.0 +","SAMPLE_2D(tex, uv + displacement.xw).rgb * 2.0 +","SAMPLE_2D(tex, uv + displacement.zy).rgb +","SAMPLE_2D(tex, uv + displacement.wy).rgb * 2.0 +","SAMPLE_2D(tex, uv + displacement.xy).rgb;","return result * 0.0625;","}","vec3 magBox(in sampler2D tex, in vec2 tc, in vec2 texelSize, in float sampleScale)","{","vec4 displacement = texelSize.xyxy * vec4(-0.5, -0.5, 0.5, 0.5) * sampleScale;","vec3 s =","SAMPLE_2D(tex, (tc + displacement.xy)).rgb +","SAMPLE_2D(tex, (tc + displacement.zy)).rgb +","SAMPLE_2D(tex, (tc + displacement.xw)).rgb +","SAMPLE_2D(tex, (tc + displacement.zw)).rgb;","return s * 0.25;","}","uniform vec3 lightDirection;","uniform sampler2D decalTex ;","uniform sampler2D specularRoughnessTex ;","uniform sampler2D emissionTex ;","uniform sampler2D maskTex ;","uniform sampler2D opacityTex ;","#ifdef PBR_METALLIC","uniform sampler2D metalnessMap ;","#endif","uniform vec4 texFromTo;","uniform vec4 lightColorInvMaxEmission;","uniform vec3 darkColor;","uniform vec4 maskColor;","uniform vec4 colorFactor;","uniform vec2 worldTerrainSize;","uniform float texInterpolationParameter;","uniform float specularPower;","uniform float normalZScale;","uniform vec3 submarineColorMultiplier;","uniform vec2 submarineBottomDiff;","#ifdef DYNAMIC","uniform vec2 v2param[11];","#define texCenter0 (v2param[6])","#define texCenter1 (v2param[7])","#define sinCosAngle (v2param[8])","#define rotation (v2param[9])","#define emissionFactor (v2param[10].x)","#define specularFactor (v2param[10].y)","#else","uniform vec2 v2paramStatic[9];","#define texCenter0 (v2paramStatic[5])","#define sinCosAngle (v2paramStatic[6])","#define rotation (v2paramStatic[7])","#define emissionFactor (v2paramStatic[8].x)","#define specularFactor (v2paramStatic[8].y)","#endif","#define submarineBottom (submarineBottomDiff.x)","#define submarineDiff (submarineBottomDiff.y)","#define lightColor lightColorInvMaxEmission.rgb","#ifdef DYNAMIC","smooth in vec4 texCoord;","#else","smooth in vec2 texCoord;","#endif","smooth in vec4 vdFcd;","smooth in vec4 sunVertexPosition;","smooth in vec3 worldPosition;","#ifdef FOG_OF_WAR","smooth in vec2 fowTc;","#endif","smooth in vec3 _n;","#define texCoord0 texCoord.xy","#define texCoord1 texCoord.zw","#define viewDirection vdFcd.xyz","#define fragCameraDistance vdFcd.w","#if defined(TERRAIN_DECAL_GOOD)","uniform sampler2D normalTex ;","vec3 getNormal(in vec2 tc0, in vec2 tc1)","{","vec3 nm0 = sampleNormalmap(normalTex, tc0);","#ifdef DYNAMIC","vec2 nm1xy = texture(normalTex, tc1).rg * 2.0 - 1.0;","vec3 nm1 = sampleNormalmap(normalTex, tc1);","vec3 mixedNormal = mix(nm0, nm1, texInterpolationParameter);","mixedNormal.z *= normalZScale;","vec3 texNormal = normalize(mixedNormal);","#else","nm0.z *= normalZScale;","vec3 texNormal = normalize(nm0);","#endif","texNormal.xy = mat2(sinCosAngle[1], sinCosAngle[0], -sinCosAngle[0], sinCosAngle[1]) * texNormal.xy;","float f = 1.0 / (1.0 + _n.z);","float mxyf = -_n.x * _n.y * f;","mat3 R = mat3(","1.0 - _n.x * _n.x * f, mxyf, -_n.x,","mxyf, 1.0 - _n.y * _n.y * f, -_n.y,","_n.x, _n.y, 1.0 - dot(_n.xy, _n.xy) * f",");","return R * texNormal;","}","#elif defined(TERRAIN_DECAL_BAD)","vec3 getNormal(in vec2 tc0, in vec2 tc1) { return _n; }","#else","vec3 getNormal(in vec2 tc0, in vec2 tc1) { return vec3(0.0); }","#endif","layout(location = 0) out vec4 drawBuffer0;","#ifdef DEFERRED","#define albedo drawBuffer0","#ifdef DYNAMIC","layout(location = 2) out vec4 drawBuffer2;","layout(location = 3) out vec4 drawBuffer3;","#define outFragNormal drawBuffer2","#define outSpecular drawBuffer3.r","#define outRoughness drawBuffer3.r","#define outEmission drawBuffer3.g","#define outSpecularPower drawBuffer3.b","#define outMetalness drawBuffer3.b","#define emSpecAlpha drawBuffer3.a","#else","layout(location = 1) out vec4 drawBuffer1;","layout(location = 2) out vec4 drawBuffer2;","#define outFragNormal drawBuffer1","#define outSpecular drawBuffer2.r","#define outRoughness drawBuffer2.r","#define outEmission drawBuffer2.g","#define outSpecularPower drawBuffer2.b","#define outMetalness drawBuffer2.b","#define emSpecAlpha drawBuffer2.a","#endif","#else","#ifdef FOG_OF_WAR_POSTPROCESS","layout(location = 2) out vec4 drawBuffer2;","#define outFowBuffer drawBuffer2","#endif","#endif","#define outFragColor drawBuffer0","void main()","{","if (any(lessThanEqual(worldPosition.xy, vec2(0.0))) || any(greaterThanEqual(worldPosition.xy, worldTerrainSize))) discard;","#ifdef OVERDRAW_FULL","outFragColor = vec4(0.1, 0.0, 0.0, 1.0);","#else","mat2 rot = mat2(sinCosAngle[1], rotation[0], rotation[1], sinCosAngle[1]);","vec2 tc0 = rot * (texCoord0 - texCenter0) + texCenter0;","if (any(lessThan(tc0, texFromTo.xy)) || any(greaterThan(tc0, texFromTo.zw))) discard;","#ifdef DYNAMIC","vec2 tc1 = rot * (texCoord1 - texCenter1) + texCenter1;","vec4 diffuseColorA = mix(texture(decalTex, tc0), texture(decalTex, tc1), texInterpolationParameter);","vec3 diffuseColor = diffuseColorA.rgb;","float alpha = mix(texture(opacityTex, tc0).r, texture(opacityTex, tc1).r, texInterpolationParameter);","float colorAlpha = diffuseColorA.a;","vec3 texNormal = getNormal(tc0, tc1);","float emission = mix(texture(emissionTex, tc0).r, texture(emissionTex, tc1).r, texInterpolationParameter) * emissionFactor;","float mask = mix(texture(maskTex, tc0).r, texture(maskTex, tc1).r, texInterpolationParameter);","#ifdef PBR_METALLIC","float metallic = mix(texture(metalnessMap, tc0).r, texture(metalnessMap, tc1).r, texInterpolationParameter);","float roughness = mix(texture(specularRoughnessTex, tc0).r, texture(specularRoughnessTex, tc1).r, texInterpolationParameter);","#else","float specular = mix(texture(specularRoughnessTex, tc0).r, texture(specularRoughnessTex, tc1).r, texInterpolationParameter) * specularFactor;","#endif","#else","vec4 diffuseColorA = texture(decalTex, tc0);","vec3 diffuseColor = diffuseColorA.rgb;","float colorAlpha = diffuseColorA.a;","float alpha = texture(opacityTex, tc0).r;","vec3 texNormal = getNormal(tc0, vec2(0.0));","float emission = texture(emissionTex, tc0).r;","float mask = texture(maskTex, tc0).r;","#ifdef PBR_METALLIC","float metallic = texture(metalnessMap, tc0).r;","float roughness = texture(specularRoughnessTex, tc0).r;","#else","float specular = texture(specularRoughnessTex, tc0).r * specularFactor;","#endif","#endif","diffuseColor = mix(diffuseColor, maskColor.rgb, mask);","float submarineColorInterp = clamp((worldPosition.z - submarineBottom) / submarineDiff, 0.0, 1.0);","diffuseColor *= mix(submarineColorMultiplier, vec3(1.0), submarineColorInterp);","#ifdef DEFERRED","albedo.xyz = diffuseColor;","albedo.a = min(alpha, colorAlpha * maskColor.a);","albedo *= colorFactor;","texNormal += vec3(1.0);","texNormal *= 0.5f;","outFragNormal.xyz = texNormal;","outFragNormal.a = alpha * colorFactor.a;","outEmission = 1.0 / (1.0 + emission);","#ifdef PBR_METALLIC","outMetalness = metallic;","outRoughness = roughness;","#else","outSpecular = 1.0 / (1.0 + specular);","outSpecularPower = specularPower;","#endif","emSpecAlpha = alpha * colorFactor.a;","#else","vec3 nViewDirection = normalize(viewDirection);","#ifdef PBR_METALLIC","outFragColor.rgb = metallicPbrColor(roughness, metallic, 0.0, diffuseColor, lightColor, normalize(viewDirection), lightDirection, texNormal);","#else","vec3 reflection = -reflect(lightDirection, texNormal);","float fRdotV = max(0.0, dot(normalize(reflection), normalize(nViewDirection)));","float lightIntensity = max(dot(lightDirection, texNormal), 0.0);","vec3 totalSpecular = lightColor * (pow(fRdotV, specularPower * 100.0)) * specular;","vec3 sunColor = mix(darkColor, lightColor, lightIntensity);","addShadowSpec(texNormal, sunVertexPosition.xyz, lightDirection, darkColor, 0 , sunColor, totalSpecular);","outFragColor.rgb = diffuseColor * sunColor;","outFragColor.rgb = (outFragColor.rgb + totalSpecular) * max(0.0, 1.0 - emission) + (diffuseColor + totalSpecular) * emission;","#endif","outFragColor.a = min(alpha, colorAlpha * maskColor.a);","outFragColor *= colorFactor;","outFragColor.rgb = addFog(outFragColor.rgb, fragCameraDistance);","#ifdef FOG_OF_WAR","float fow = getFogOfWarFactor(fowTc);","outFragColor.rgb *= fow;","#ifdef FOG_OF_WAR_POSTPROCESS","outFowBuffer.ra = vec2(fow, alpha);","#endif","#endif","#endif","#ifdef OVERDRAW_ALPHA","outFragColor = vec4(0.1, 0.0, 0.0, 1.0);","#endif","#endif","}"],"vertex":["#version 300 es","precision mediump float;","precision mediump sampler3D;","#define transformFeedback(varName)","#if (__VERSION__ >= 330) || (__VERSION__ == 300)","#define vertAttrib(Num, Type, Name) layout(location = Num) in Type Name","#else","#define vertAttrib(Num, Type, Name) attribute Type Name","#endif","#if __VERSION__ <= 120","#define VAR_SMOOTH_IN(type, name) varying type name","#define VAR_FLAT_IN(type, name) varying type name","#define VAR_SMOOTH_OUT(type, name) varying type name","#define VAR_FLAT_OUT(type, name) varying type name","#define SAMPLE_2D(_smplr, _tc) (texture2D(_smplr, _tc))","#define SAMPLE_2D_GRAD(_smplr, _tc, Fx, Fy) (texture2D(_smplr, _tc))","#define SAMPLE_CUBE(_smplr, _tc) (textureCube(_smplr, _tc))","#else","#define VAR_SMOOTH_IN(type, name) smooth in type name","#define VAR_FLAT_IN(type, name) flat in type name","#define VAR_SMOOTH_OUT(type, name) smooth out type name","#define VAR_FLAT_OUT(type, name) flat out type name","#define SAMPLE_2D(_smplr, _tc) (texture(_smplr, _tc))","#define SAMPLE_2D_GRAD(_smplr, _tc, Fx, Fy) (textureGrad(_smplr, _tc, dFdx(Fx), dFdy(Fy)))","#define SAMPLE_CUBE(_smplr, _tc) (texture(_smplr, _tc))","#endif","#if (__VERSION__ < 130) || defined(NO_RG)","#define NM_XY ra","#else","#define NM_XY rg","#endif","vec3 unpackRgNormal(in vec2 xy)","{","xy = xy * 2.0 - 1.0;","return vec3(xy, sqrt(max(0.0, 1.0 - dot(xy, xy))));","}","vec3 sampleNormalmap(in sampler2D tex, in vec2 tc)","{","return unpackRgNormal(SAMPLE_2D(tex, tc).NM_XY);","}","vec3 downsample13(in sampler2D tex, in vec2 tc, in vec2 texelSize)","{","vec3 s1  = SAMPLE_2D(tex, tc + texelSize * vec2(-1.0, -1.0)).rgb;","vec3 s2  = SAMPLE_2D(tex, tc + texelSize * vec2( 0.0, -1.0)).rgb;","vec3 s3  = SAMPLE_2D(tex, tc + texelSize * vec2( 1.0, -1.0)).rgb;","vec3 s4  = SAMPLE_2D(tex, tc + texelSize * vec2(-0.5, -0.5)).rgb;","vec3 s5  = SAMPLE_2D(tex, tc + texelSize * vec2( 0.5, -0.5)).rgb;","vec3 s6  = SAMPLE_2D(tex, tc + texelSize * vec2(-1.0,  0.0)).rgb;","vec3 s7  = SAMPLE_2D(tex, tc).rgb;","vec3 s8  = SAMPLE_2D(tex, tc + texelSize * vec2( 1.0,  0.0)).rgb;","vec3 s9  = SAMPLE_2D(tex, tc + texelSize * vec2(-0.5,  0.5)).rgb;","vec3 s10 = SAMPLE_2D(tex, tc + texelSize * vec2( 0.5,  0.5)).rgb;","vec3 s11 = SAMPLE_2D(tex, tc + texelSize * vec2(-1.0,  1.0)).rgb;","vec3 s12 = SAMPLE_2D(tex, tc + texelSize * vec2( 0.0,  1.0)).rgb;","vec3 s13 = SAMPLE_2D(tex, tc + texelSize * vec2( 1.0,  1.0)).rgb;","return","(s4 + s5 + s9 + s10) * 0.125 +","(s1 + s2 + s7 + s6) * 0.03125 +","(s2 + s3 + s8 + s7) * 0.03125 +","(s6 + s7 + s12 + s11) * 0.03125 +","(s7 + s8 + s13 + s12) * 0.03125;","}","vec3 downsample4(in sampler2D tex, in vec2 tc, in vec2 texelSize)","{","vec4 displacement = texelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);","vec3 s =","SAMPLE_2D(tex, tc + displacement.xy).rgb +","SAMPLE_2D(tex, tc + displacement.zy).rgb +","SAMPLE_2D(tex, tc + displacement.xw).rgb +","SAMPLE_2D(tex, tc + displacement.zw).rgb;","return s * 0.25;","}","vec3 magTent(in sampler2D tex, in vec2 uv, in vec2 texelSize, in float sampleScale)","{","vec4 displacement = texelSize.xyxy * vec4(1.0, 1.0, -1.0, 0.0) * sampleScale;","vec3 result =","SAMPLE_2D(tex, uv - displacement.xy).rgb +","SAMPLE_2D(tex, uv - displacement.wy).rgb * 2.0 +","SAMPLE_2D(tex, uv - displacement.zy).rgb +","SAMPLE_2D(tex, uv + displacement.zw).rgb * 2.0 +","SAMPLE_2D(tex, uv).rgb * 4.0 +","SAMPLE_2D(tex, uv + displacement.xw).rgb * 2.0 +","SAMPLE_2D(tex, uv + displacement.zy).rgb +","SAMPLE_2D(tex, uv + displacement.wy).rgb * 2.0 +","SAMPLE_2D(tex, uv + displacement.xy).rgb;","return result * 0.0625;","}","vec3 magBox(in sampler2D tex, in vec2 tc, in vec2 texelSize, in float sampleScale)","{","vec4 displacement = texelSize.xyxy * vec4(-0.5, -0.5, 0.5, 0.5) * sampleScale;","vec3 s =","SAMPLE_2D(tex, (tc + displacement.xy)).rgb +","SAMPLE_2D(tex, (tc + displacement.zy)).rgb +","SAMPLE_2D(tex, (tc + displacement.xw)).rgb +","SAMPLE_2D(tex, (tc + displacement.zw)).rgb;","return s * 0.25;","}","uniform sampler2D heightTex ;","uniform sampler2D normalMap ;","vertAttrib(0, vec2, vertexData);","uniform vec3 lightDirection;","uniform mat4 viewProjectionMatrix;","uniform vec3 cameraPosition;","#ifdef FOG_OF_WAR","uniform vec4 fowMapScalePosition;","#endif","#ifdef DYNAMIC","uniform vec2 v2param[11];","#define texScale (v2param[0])","#define texOrigin0 (v2param[1])","#define texOrigin1 (v2param[2])","#define heightScale (v2param[3].x)","#define terrainScale (v2param[3].y)","#define patchOrigin (v2param[4])","#define terrainSize (v2param[5])","#else","uniform vec2 v2paramStatic[9];","#define texScale (v2paramStatic[0])","#define texOrigin0 (v2paramStatic[1])","#define heightScale (v2paramStatic[2].x)","#define terrainScale (v2paramStatic[2].y)","#define patchOrigin (v2paramStatic[3])","#define terrainSize (v2paramStatic[4])","#endif","uniform mat4 sunMatrix;","#ifdef DYNAMIC","smooth out vec4 texCoord;","#else","smooth out vec2 texCoord;","#endif","smooth out vec4 vdFcd;","smooth out vec4 sunVertexPosition;","smooth out vec3 worldPosition;","#ifdef FOG_OF_WAR","smooth out vec2 fowTc;","#endif","smooth out vec3 _n;","void main()","{","vec2 patchPosition = vertexData + patchOrigin;","vec2 vertexTexCoord = (patchPosition + 0.5) / terrainSize;","vec3 position = vec3(patchPosition * terrainScale, texture(heightTex, vertexTexCoord).r * heightScale);","vec2 tCoord = vertexData * texScale;","texCoord.xy = tCoord + texOrigin0;","#ifdef DYNAMIC","texCoord.zw = tCoord + texOrigin1;","#endif","worldPosition = position;","sunVertexPosition = sunMatrix * vec4(position, 1.0);","gl_Position = viewProjectionMatrix * vec4(position, 1.0);","vdFcd = vec4(normalize(cameraPosition - position), distance(cameraPosition, position));","#ifdef FOG_OF_WAR","fowTc = position.xy * fowMapScalePosition.xy + fowMapScalePosition.zw;","#endif","_n.xyz = sampleNormalmap(normalMap, vertexTexCoord);","}"]}}
