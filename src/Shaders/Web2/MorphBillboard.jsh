{"meta":{"feedback_varyings":null,"interface_block_bindings":null,"sampler_default_values":[["diffuseTex",0],["emissionTex",2],["fogOfWar",6],["maskTex",3],["specularTex",1]],"shader_parameters":[["fragment","sampler2D","diffuseTex",1],["fragment","sampler2D","emissionTex",1],["fragment","vec4","fogColor",1],["fragment","vec2","fogNearFar",1],["fragment","sampler2D","fogOfWar",1],["fragment","float","fowInterpolationParameter",1],["vertex","vec4","fowMapScalePosition",1],["vertex","mat4","invViewMatrix",1],["fragment","sampler2D","maskTex",1],["vertex","mat4","modelTransformationMatrix",1],["vertex","mat4","projectionMatrix",1],["fragment","sampler2D","specularTex",1],["fragment","vec3","v3params",10],["vertex","vec3","v3params",10],["vertex","vec3","worldCameraPosition",1]],"vertex_attributes":[[0,"vec3","vertex1"],[2,"vec3","normal1"],[6,"vec3","vertex2"],[7,"vec3","normal2"],[10,"vec2","texcoord"]]},"stages":{"fragment":["#version 300 es","precision mediump float;","precision mediump sampler3D;","#define transformFeedback(varName)","#if (__VERSION__ >= 330) || (__VERSION__ == 300)","#define vertAttrib(Num, Type, Name) layout(location = Num) in Type Name","#else","#define vertAttrib(Num, Type, Name) attribute Type Name","#endif","#if __VERSION__ <= 120","#define VAR_SMOOTH_IN(type, name) varying type name","#define VAR_FLAT_IN(type, name) varying type name","#define VAR_SMOOTH_OUT(type, name) varying type name","#define VAR_FLAT_OUT(type, name) varying type name","#define SAMPLE_2D(_smplr, _tc) (texture2D(_smplr, _tc))","#define SAMPLE_2D_GRAD(_smplr, _tc, Fx, Fy) (texture2D(_smplr, _tc))","#define SAMPLE_CUBE(_smplr, _tc) (textureCube(_smplr, _tc))","#else","#define VAR_SMOOTH_IN(type, name) smooth in type name","#define VAR_FLAT_IN(type, name) flat in type name","#define VAR_SMOOTH_OUT(type, name) smooth out type name","#define VAR_FLAT_OUT(type, name) flat out type name","#define SAMPLE_2D(_smplr, _tc) (texture(_smplr, _tc))","#define SAMPLE_2D_GRAD(_smplr, _tc, Fx, Fy) (textureGrad(_smplr, _tc, dFdx(Fx), dFdy(Fy)))","#define SAMPLE_CUBE(_smplr, _tc) (texture(_smplr, _tc))","#endif","#if (__VERSION__ < 130) || defined(NO_RG)","#define NM_XY ra","#else","#define NM_XY rg","#endif","#ifdef FOG_OF_WAR_POSTPROCESS","#define DECLARE_FRAGCOLOR layout(location = 0) out vec4 outFragColor; layout(location = 2) out vec4 outFowBuffer;","#else","#define DECLARE_FRAGCOLOR layout(location = 0) out vec4 outFragColor;","#endif","#define outFragDepth gl_FragDepth","#ifdef FOG","uniform vec2 fogNearFar;","uniform vec4 fogColor;","float getFogFactor(in float zEye)","{","float fogNear = fogNearFar[0];","float fogFar = fogNearFar[1];","return clamp((zEye - fogNear) / (fogFar - fogNear), 0.0, 1.0) * fogColor.a;","}","vec3 addFogFactor(in vec3 color, in float fogFactor)","{","return mix(color, fogColor.rgb, fogFactor);","}","vec3 addFog(in vec3 color, in float zEye)","{","float fogFactor = getFogFactor(zEye);","return addFogFactor(color, fogFactor);","}","#else","float getFogFactor(in float zEye)","{","return 0.0;","}","vec3 addFogFactor(in vec3 color, in float fogFactor)","{","return color;","}","vec3 addFog(in vec3 color, in float zEye)","{","return color;","}","#endif","#ifdef FOG_OF_WAR","uniform sampler2D fogOfWar ;","uniform float fowInterpolationParameter;","float getFogOfWarFactor(in vec2 tc)","{","const float border0 = -0.001;","const float border1 = 1.001;","float clampTo0 = step(border0, tc.x) * (1.0 - step(border1, tc.x)) * step(border0, tc.y) * (1.0 - step(border1, tc.y));","vec2 rg = texture(fogOfWar, tc).rg * clampTo0;","return mix(rg.r, rg.g, fowInterpolationParameter);","}","#else","float getFogOfWarFactor(in vec2 tc) { return 1.0; }","#endif","const float specularPower = 10.0;","uniform sampler2D diffuseTex ;","uniform sampler2D specularTex ;","uniform sampler2D emissionTex ;","uniform sampler2D maskTex ;","uniform vec3 v3params[10];","#define modelLightDirection v3params[1]","#define maskColor v3params[5]","#define lightColor v3params[6]","#define darkColor v3params[7]","#define colorFactor v3params[8]","#define specularFactor v3params[9].x","#define emissionFactor v3params[9].y","smooth in vec3 fragNormal;","smooth in vec2 fragTexCoord;","smooth in vec3 viewDirection;","smooth in float lightIntensity;","smooth in float fragCameraDistance;","#ifdef FOG_OF_WAR","smooth in vec2 fowTc;","#endif","DECLARE_FRAGCOLOR","void main()","{","#ifdef OVERDRAW_FULL","outFragColor = vec4(0.1, 0.0, 0.0, 1.0);","#else","vec4 diffuseColor = texture(diffuseTex, fragTexCoord);","if (diffuseColor.a < 0.5) discard;","vec3 nViewDirection = normalize(viewDirection);","vec3 normal = normalize(fragNormal);","float specular = texture(specularTex, fragTexCoord).r * specularFactor;","float emission = texture(emissionTex, fragTexCoord).r * emissionFactor;","float mask = texture(maskTex, fragTexCoord).r;","diffuseColor.xyz = mix(diffuseColor.xyz, maskColor, mask);","vec3 reflection = -reflect(modelLightDirection, normal);","float fRdotV = max(0.0, dot(normalize(reflection), normalize(nViewDirection)));","vec4 totalSpecular = (vec4(lightColor, 1.0) * 2.0) * (pow(fRdotV, specularPower)) * specular;","vec3 sunColor = mix(darkColor, lightColor, lightIntensity);","outFragColor.xyz = diffuseColor.xyz * sunColor;","outFragColor = mix(outFragColor + totalSpecular, diffuseColor + totalSpecular, emission);","outFragColor.a = 1.0;","outFragColor.xyz *= colorFactor;","outFragColor.rgb = addFog(outFragColor.rgb, fragCameraDistance);","#ifdef FOG_OF_WAR","float fow = getFogOfWarFactor(fowTc);","outFragColor.rgb *= fow;","#ifdef FOG_OF_WAR_POSTPROCESS","outFowBuffer.r = fow;","#endif","#endif","#ifdef OVERDRAW_ALPHA","outFragColor = vec4(0.1, 0.0, 0.0, 1.0);","#endif","#endif","}"],"vertex":["#version 300 es","precision mediump float;","precision mediump sampler3D;","#define transformFeedback(varName)","#if (__VERSION__ >= 330) || (__VERSION__ == 300)","#define vertAttrib(Num, Type, Name) layout(location = Num) in Type Name","#else","#define vertAttrib(Num, Type, Name) attribute Type Name","#endif","#if __VERSION__ <= 120","#define VAR_SMOOTH_IN(type, name) varying type name","#define VAR_FLAT_IN(type, name) varying type name","#define VAR_SMOOTH_OUT(type, name) varying type name","#define VAR_FLAT_OUT(type, name) varying type name","#define SAMPLE_2D(_smplr, _tc) (texture2D(_smplr, _tc))","#define SAMPLE_2D_GRAD(_smplr, _tc, Fx, Fy) (texture2D(_smplr, _tc))","#define SAMPLE_CUBE(_smplr, _tc) (textureCube(_smplr, _tc))","#else","#define VAR_SMOOTH_IN(type, name) smooth in type name","#define VAR_FLAT_IN(type, name) flat in type name","#define VAR_SMOOTH_OUT(type, name) smooth out type name","#define VAR_FLAT_OUT(type, name) flat out type name","#define SAMPLE_2D(_smplr, _tc) (texture(_smplr, _tc))","#define SAMPLE_2D_GRAD(_smplr, _tc, Fx, Fy) (textureGrad(_smplr, _tc, dFdx(Fx), dFdy(Fy)))","#define SAMPLE_CUBE(_smplr, _tc) (texture(_smplr, _tc))","#endif","#if (__VERSION__ < 130) || defined(NO_RG)","#define NM_XY ra","#else","#define NM_XY rg","#endif","vertAttrib(0, vec3, vertex1);","vertAttrib(2, vec3, normal1);","vertAttrib(6, vec3, vertex2);","vertAttrib(7, vec3, normal2);","vertAttrib(10, vec2, texcoord);","uniform vec3 worldCameraPosition;","uniform vec3 v3params[10];","#define modelCameraPosition v3params[0]","#define modelLightDirection v3params[1]","#define viewModelPosition v3params[2]","#define ndcModelPosition v3params[3]","#define modelPosition v3params[4]","#define interpolationParameter v3params[9].z","uniform mat4 projectionMatrix;","uniform mat4 modelTransformationMatrix;","#ifdef FOG_OF_WAR","uniform vec4 fowMapScalePosition;","uniform mat4 invViewMatrix;","#endif","smooth out vec3 fragNormal;","smooth out vec2 fragTexCoord;","smooth out vec3 viewDirection;","smooth out float lightIntensity;","smooth out float fragCameraDistance;","#ifdef FOG_OF_WAR","smooth out vec2 fowTc;","#endif","void main()","{","vec3 interpolatedVertex = mix(vertex1, vertex2, interpolationParameter);","#ifdef NORMALIZE_INT10_MANUALLY","vec3 interpolatedNormal = mix(normal1 / 512.0, normal2 / 512.0, interpolationParameter);","#else","vec3 interpolatedNormal = mix(normal1, normal2, interpolationParameter);","#endif","fragNormal = normalize(interpolatedNormal);","fragTexCoord = texcoord;","viewDirection = normalize(modelCameraPosition - interpolatedVertex);","lightIntensity = max(dot(modelLightDirection, fragNormal), 0.0);","vec4 modelVertex = modelTransformationMatrix * vec4(interpolatedVertex, 1.0);","fragCameraDistance = distance(worldCameraPosition, modelVertex.xyz + modelPosition);","#ifdef FOG_OF_WAR","fowTc = (invViewMatrix * vec4(modelVertex.xyz + viewModelPosition, modelVertex.w)).xy * fowMapScalePosition.xy + fowMapScalePosition.zw;","#endif","modelVertex.z += viewModelPosition.z;","gl_Position = projectionMatrix * modelVertex;","gl_Position.xy += ndcModelPosition.xy;","gl_Position.xy /= ndcModelPosition.z;","gl_Position.z /= gl_Position.w;","gl_Position.w = 1.0;","}"]}}
