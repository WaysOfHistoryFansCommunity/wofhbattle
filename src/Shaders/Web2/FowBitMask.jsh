{"meta":{"feedback_varyings":null,"interface_block_bindings":null,"sampler_default_values":[["maskTex",0]],"shader_parameters":[["fragment","vec2","bitSize",1],["fragment","vec4","color",1],["fragment","bool","cover",1],["fragment","usampler2D","maskTex",1],["vertex","vec4","positionSize",1]],"vertex_attributes":[[0,"vec2","quad"]]},"stages":{"fragment":["#version 300 es","precision mediump float;","precision mediump sampler3D;","precision lowp usampler2D;","#define transformFeedback(varName)","#if (__VERSION__ >= 330) || (__VERSION__ == 300)","#define vertAttrib(Num, Type, Name) layout(location = Num) in Type Name","#else","#define vertAttrib(Num, Type, Name) attribute Type Name","#endif","#if __VERSION__ <= 120","#define VAR_SMOOTH_IN(type, name) varying type name","#define VAR_FLAT_IN(type, name) varying type name","#define VAR_SMOOTH_OUT(type, name) varying type name","#define VAR_FLAT_OUT(type, name) varying type name","#define SAMPLE_2D(_smplr, _tc) (texture2D(_smplr, _tc))","#define SAMPLE_2D_GRAD(_smplr, _tc, Fx, Fy) (texture2D(_smplr, _tc))","#define SAMPLE_CUBE(_smplr, _tc) (textureCube(_smplr, _tc))","#else","#define VAR_SMOOTH_IN(type, name) smooth in type name","#define VAR_FLAT_IN(type, name) flat in type name","#define VAR_SMOOTH_OUT(type, name) smooth out type name","#define VAR_FLAT_OUT(type, name) flat out type name","#define SAMPLE_2D(_smplr, _tc) (texture(_smplr, _tc))","#define SAMPLE_2D_GRAD(_smplr, _tc, Fx, Fy) (textureGrad(_smplr, _tc, dFdx(Fx), dFdy(Fy)))","#define SAMPLE_CUBE(_smplr, _tc) (texture(_smplr, _tc))","#endif","#if (__VERSION__ < 130) || defined(NO_RG)","#define NM_XY ra","#else","#define NM_XY rg","#endif","#ifdef FOG_OF_WAR_POSTPROCESS","#define DECLARE_FRAGCOLOR layout(location = 0) out vec4 outFragColor; layout(location = 2) out vec4 outFowBuffer;","#else","#define DECLARE_FRAGCOLOR layout(location = 0) out vec4 outFragColor;","#endif","#define outFragDepth gl_FragDepth","DECLARE_FRAGCOLOR","uniform usampler2D maskTex ;","uniform vec2 bitSize;","uniform vec4 color;","uniform bool cover;","smooth in vec2 tc;","uint sampleBitmap(in vec2 bsTc)","{","ivec2 bitTexelCoord = ivec2(floor(bsTc));","ivec2 texelCoord = bitTexelCoord / 4;","ivec2 bitShiftCoord = bitTexelCoord % 4;","int bitShift = bitShiftCoord.y * 4 + bitShiftCoord.x;","uint texelValue = texelFetch(maskTex, texelCoord, 0).r;","return (texelValue >> bitShift) & 1u;","}","float sampleAvgBitmap(in vec2 bsTc)","{","ivec2 bitTexelCoord = ivec2(floor(bsTc));","ivec2 maxTc = ivec2(bitSize) - ivec2(1);","float accum = 0.0;","for (int i = -1; i <= 1; ++i) {","for (int j = -1; j <= 1; ++j) {","ivec2 uv = bitTexelCoord + ivec2(i, j);","uv = clamp(uv, ivec2(0), maxTc);","ivec2 texelCoord = uv / 4;","ivec2 bitShiftCoord = uv % 4;","int bitShift = bitShiftCoord.y * 4 + bitShiftCoord.x;","uint texelValue = texelFetch(maskTex, texelCoord, 0).r;","accum += float((texelValue >> bitShift) & 1u);","}","}","return accum / 9.0;","}","void main()","{","vec2 maxTc = bitSize - vec2(1.0);","vec2 bsTc00 = clamp(tc * bitSize - vec2(0.5), vec2(0.0), maxTc);","vec2 bsTc10 = clamp(bsTc00 + vec2(1.0, 0.0), vec2(0.0), maxTc);","vec2 bsTc01 = clamp(bsTc00 + vec2(0.0, 1.0), vec2(0.0), maxTc);","vec2 bsTc11 = clamp(bsTc00 + vec2(1.0, 1.0), vec2(0.0), maxTc);","vec2 subTexel = fract(bsTc00);","float v00 = sampleAvgBitmap(bsTc00);","float v10 = sampleAvgBitmap(bsTc10);","float v01 = sampleAvgBitmap(bsTc01);","float v11 = sampleAvgBitmap(bsTc11);","float v0 = mix(v00, v10, subTexel.x);","float v1 = mix(v01, v11, subTexel.x);","float v = mix(v0, v1, subTexel.y);","vec4 filteredColor = v * color;","outFragColor = cover ? (vec4(1.0) - filteredColor) : filteredColor;","}"],"vertex":["#version 300 es","precision mediump float;","precision mediump sampler3D;","#define transformFeedback(varName)","#if (__VERSION__ >= 330) || (__VERSION__ == 300)","#define vertAttrib(Num, Type, Name) layout(location = Num) in Type Name","#else","#define vertAttrib(Num, Type, Name) attribute Type Name","#endif","#if __VERSION__ <= 120","#define VAR_SMOOTH_IN(type, name) varying type name","#define VAR_FLAT_IN(type, name) varying type name","#define VAR_SMOOTH_OUT(type, name) varying type name","#define VAR_FLAT_OUT(type, name) varying type name","#define SAMPLE_2D(_smplr, _tc) (texture2D(_smplr, _tc))","#define SAMPLE_2D_GRAD(_smplr, _tc, Fx, Fy) (texture2D(_smplr, _tc))","#define SAMPLE_CUBE(_smplr, _tc) (textureCube(_smplr, _tc))","#else","#define VAR_SMOOTH_IN(type, name) smooth in type name","#define VAR_FLAT_IN(type, name) flat in type name","#define VAR_SMOOTH_OUT(type, name) smooth out type name","#define VAR_FLAT_OUT(type, name) flat out type name","#define SAMPLE_2D(_smplr, _tc) (texture(_smplr, _tc))","#define SAMPLE_2D_GRAD(_smplr, _tc, Fx, Fy) (textureGrad(_smplr, _tc, dFdx(Fx), dFdy(Fy)))","#define SAMPLE_CUBE(_smplr, _tc) (texture(_smplr, _tc))","#endif","#if (__VERSION__ < 130) || defined(NO_RG)","#define NM_XY ra","#else","#define NM_XY rg","#endif","vertAttrib(0, vec2, quad);","uniform vec4 positionSize;","#define position positionSize.xy","#define size positionSize.zw","smooth out vec2 tc;","void main()","{","tc = quad;","gl_Position = vec4(quad * size + position, 0.0, 1.0);","}"]}}
