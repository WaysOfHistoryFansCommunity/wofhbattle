{"meta":{"feedback_varyings":null,"interface_block_bindings":[[0,"InstanceBlock"],[1,"BoneMatrix"]],"sampler_default_values":[["diffuseTex",0],["fogOfWar",6],["viewDepthTex",2]],"shader_parameters":[["vertex","vec3","bonePosition",1],["fragment","float","bottom",1],["vertex","vec3","cameraPosition",1],["fragment","bool","depthOpacity",1],["fragment","sampler2D","diffuseTex",1],["fragment","vec4","fogColor",1],["fragment","vec2","fogNearFar",1],["fragment","sampler2D","fogOfWar",1],["fragment","float","fowInterpolationParameter",1],["vertex","vec4","fowMapScalePosition",1],["fragment","vec4","invScreenSizeDepthNearFar",1],["fragment","sampler2D","viewDepthTex",1],["vertex","vec3","viewMatrixXY",2],["vertex","mat4","viewProjectionMatrix",1]],"vertex_attributes":null},"stages":{"fragment":["#version 300 es","precision mediump float;","precision mediump sampler3D;","#define transformFeedback(varName)","#if (__VERSION__ >= 330) || (__VERSION__ == 300)","#define vertAttrib(Num, Type, Name) layout(location = Num) in Type Name","#else","#define vertAttrib(Num, Type, Name) attribute Type Name","#endif","#if __VERSION__ <= 120","#define VAR_SMOOTH_IN(type, name) varying type name","#define VAR_FLAT_IN(type, name) varying type name","#define VAR_SMOOTH_OUT(type, name) varying type name","#define VAR_FLAT_OUT(type, name) varying type name","#define SAMPLE_2D(_smplr, _tc) (texture2D(_smplr, _tc))","#define SAMPLE_2D_GRAD(_smplr, _tc, Fx, Fy) (texture2D(_smplr, _tc))","#define SAMPLE_CUBE(_smplr, _tc) (textureCube(_smplr, _tc))","#else","#define VAR_SMOOTH_IN(type, name) smooth in type name","#define VAR_FLAT_IN(type, name) flat in type name","#define VAR_SMOOTH_OUT(type, name) smooth out type name","#define VAR_FLAT_OUT(type, name) flat out type name","#define SAMPLE_2D(_smplr, _tc) (texture(_smplr, _tc))","#define SAMPLE_2D_GRAD(_smplr, _tc, Fx, Fy) (textureGrad(_smplr, _tc, dFdx(Fx), dFdy(Fy)))","#define SAMPLE_CUBE(_smplr, _tc) (texture(_smplr, _tc))","#endif","#if (__VERSION__ < 130) || defined(NO_RG)","#define NM_XY ra","#else","#define NM_XY rg","#endif","#ifdef FOG_OF_WAR_POSTPROCESS","#define DECLARE_FRAGCOLOR layout(location = 0) out vec4 outFragColor; layout(location = 2) out vec4 outFowBuffer;","#else","#define DECLARE_FRAGCOLOR layout(location = 0) out vec4 outFragColor;","#endif","#define outFragDepth gl_FragDepth","#ifdef FOG","uniform vec2 fogNearFar;","uniform vec4 fogColor;","float getFogFactor(in float zEye)","{","float fogNear = fogNearFar[0];","float fogFar = fogNearFar[1];","return clamp((zEye - fogNear) / (fogFar - fogNear), 0.0, 1.0) * fogColor.a;","}","vec3 addFogFactor(in vec3 color, in float fogFactor)","{","return mix(color, fogColor.rgb, fogFactor);","}","vec3 addFog(in vec3 color, in float zEye)","{","float fogFactor = getFogFactor(zEye);","return addFogFactor(color, fogFactor);","}","#else","float getFogFactor(in float zEye)","{","return 0.0;","}","vec3 addFogFactor(in vec3 color, in float fogFactor)","{","return color;","}","vec3 addFog(in vec3 color, in float zEye)","{","return color;","}","#endif","#ifdef FOG_OF_WAR","uniform sampler2D fogOfWar ;","uniform float fowInterpolationParameter;","float getFogOfWarFactor(in vec2 tc)","{","const float border0 = -0.001;","const float border1 = 1.001;","float clampTo0 = step(border0, tc.x) * (1.0 - step(border1, tc.x)) * step(border0, tc.y) * (1.0 - step(border1, tc.y));","vec2 rg = texture(fogOfWar, tc).rg * clampTo0;","return mix(rg.r, rg.g, fowInterpolationParameter);","}","#else","float getFogOfWarFactor(in vec2 tc) { return 1.0; }","#endif","float mapTo01(in float value, in float min1, in float max1) {","return clamp((value - min1) / (max1 - min1), 0.0, 1.0);","}","float linearizeDepth(in float d, in float zNear, in float zFar)","{","float z_n = 2.0 * d - 1.0;","return 2.0 * zNear * zFar / (zFar + zNear - z_n * (zFar - zNear));","}","DECLARE_FRAGCOLOR","uniform sampler2D diffuseTex ;","uniform sampler2D viewDepthTex ;","uniform float bottom;","smooth in vec4 vTexCoord;","smooth in vec2 fragCameraDistancePosZ;","flat in vec4 colorFactor;","flat in vec2 texInterpolationParameterInvMaxDepth;","#define texInterpolationParameter (texInterpolationParameterInvMaxDepth.x)","#define invMaxDepth (texInterpolationParameterInvMaxDepth.y)","#define fragCameraDistance (fragCameraDistancePosZ.x)","#define fragPositionZ (fragCameraDistancePosZ.y)","#ifdef FOG_OF_WAR","smooth in vec2 fowTc;","#endif","#ifdef VECTOR_FIELD","flat in vec2 rSinCos;","#endif","#define texCoord0 (vTexCoord.xy)","#define texCoord1 (vTexCoord.zw)","uniform bool depthOpacity;","uniform vec4 invScreenSizeDepthNearFar;","#define invScreenSize invScreenSizeDepthNearFar.xy","#define zNear invScreenSizeDepthNearFar.z","#define zFar invScreenSizeDepthNearFar.w","void main()","{","#ifdef OVERDRAW_FULL","outFragColor = vec4(0.1, 0.0, 0.0, 1.0);","#else","#ifdef VECTOR_FIELD","#ifdef TARGET_IS_INT8SNORM","vec2 v0 = texture(diffuseTex, texCoord0).rg;","vec2 v1 = texture(diffuseTex, texCoord1).rg;","#else","vec2 v0 = texture(diffuseTex, texCoord0).rg * 0.1;","vec2 v1 = texture(diffuseTex, texCoord1).rg * 0.1;","#endif","vec2 disp = mix(v0, v1, texInterpolationParameter) * colorFactor.a;","disp = mat2(rSinCos.y, -rSinCos.x, rSinCos.x, rSinCos.y) * disp;","vec4 color = vec4(disp, 0.0, 1.0);","#else","vec4 color = mix(texture(diffuseTex, texCoord0), texture(diffuseTex, texCoord1), texInterpolationParameter) * colorFactor;","#endif","outFragColor = color;","#ifdef VECTOR_FIELD","float fogFactor = 1.0 - getFogFactor(fragCameraDistance);","outFragColor.rgb *= fogFactor;","#else","outFragColor.rgb = addFog(outFragColor.rgb, fragCameraDistance);","#endif","float depthDistance = abs(fragPositionZ - bottom);","if (depthOpacity) {","float viewDepth = texture(viewDepthTex, gl_FragCoord.xy * invScreenSize).r;","depthDistance = min(depthDistance, linearizeDepth(viewDepth, zNear, zFar) - linearizeDepth(gl_FragCoord.z, zNear, zFar));","}","float depthDimming = clamp(depthDistance * invMaxDepth, 0.0, 1.0);","#ifdef TARGET_IS_INT8SNORM","outFragColor.rgb *= depthDimming;","#else","outFragColor.a *= depthDimming;","#endif","#ifdef FOG_OF_WAR","float fow = getFogOfWarFactor(fowTc);","outFragColor.rgb *= fow;","#ifdef FOG_OF_WAR_POSTPROCESS","outFowBuffer.ra = vec2(fow, color.a);","#endif","#endif","#ifdef OVERDRAW_ALPHA","outFragColor = vec4(0.1, 0.0, 0.0, 1.0);","#endif","#endif","}"],"vertex":["#version 300 es","precision mediump float;","precision mediump sampler3D;","#ifdef SSBO_SKELETON","#extension GL_ARB_shader_storage_buffer_object: require","#endif","#define transformFeedback(varName)","#if (__VERSION__ >= 330) || (__VERSION__ == 300)","#define vertAttrib(Num, Type, Name) layout(location = Num) in Type Name","#else","#define vertAttrib(Num, Type, Name) attribute Type Name","#endif","#if __VERSION__ <= 120","#define VAR_SMOOTH_IN(type, name) varying type name","#define VAR_FLAT_IN(type, name) varying type name","#define VAR_SMOOTH_OUT(type, name) varying type name","#define VAR_FLAT_OUT(type, name) varying type name","#define SAMPLE_2D(_smplr, _tc) (texture2D(_smplr, _tc))","#define SAMPLE_2D_GRAD(_smplr, _tc, Fx, Fy) (texture2D(_smplr, _tc))","#define SAMPLE_CUBE(_smplr, _tc) (textureCube(_smplr, _tc))","#else","#define VAR_SMOOTH_IN(type, name) smooth in type name","#define VAR_FLAT_IN(type, name) flat in type name","#define VAR_SMOOTH_OUT(type, name) smooth out type name","#define VAR_FLAT_OUT(type, name) flat out type name","#define SAMPLE_2D(_smplr, _tc) (texture(_smplr, _tc))","#define SAMPLE_2D_GRAD(_smplr, _tc, Fx, Fy) (textureGrad(_smplr, _tc, dFdx(Fx), dFdy(Fy)))","#define SAMPLE_CUBE(_smplr, _tc) (texture(_smplr, _tc))","#endif","#if (__VERSION__ < 130) || defined(NO_RG)","#define NM_XY ra","#else","#define NM_XY rg","#endif","const vec2 quad01[] = vec2[](","vec2(0.0, 1.0),","vec2(0.0, 0.0),","vec2(1.0, 1.0),","vec2(1.0, 0.0)",");","struct InstancingData","{","vec4 positionInterpolationParameter;","vec4 sizeDisplacement;","vec4 texPositions;","vec4 vColorFactor;","vec4 texSizeSinCos;","vec4 invMaxDepthBoneMatrixIndexScaleSnapToVert;","};","#ifndef VEC4_PARAMS_COUNT","#define VEC4_PARAMS_COUNT 1","#endif","layout(std140) uniform InstanceBlock","{","InstancingData instances[VEC4_PARAMS_COUNT];","};","uniform mat4 viewProjectionMatrix;","uniform vec3 viewMatrixXY[2];","uniform vec3 cameraPosition;","#ifdef FOG_OF_WAR","uniform vec4 fowMapScalePosition;","#endif","smooth out vec4 vTexCoord;","smooth out vec2 fragCameraDistancePosZ;","flat out vec4 colorFactor;","flat out vec2 texInterpolationParameterInvMaxDepth;","#define texInterpolationParameter (texInterpolationParameterInvMaxDepth.x)","#define invMaxDepth (texInterpolationParameterInvMaxDepth.y)","#ifdef FOG_OF_WAR","smooth out vec2 fowTc;","#endif","#ifdef VECTOR_FIELD","flat out vec2 rSinCos;","#endif","#define texCoord0 (vTexCoord.xy)","#define texCoord1 (vTexCoord.zw)","#if defined(UBO_AVAILABLE)","layout(std140) uniform BoneMatrix","{","mat3x4 boneMatrixBuffer[MAX_BONES];","};","#elif defined(SSBO_SKELETON)","layout(std140, binding = 0) restrict readonly buffer BindInverse { mat3x4 bindInverseMatrices[]; };","layout(std140, binding = 4) restrict readonly buffer BoneMatrices { mat3x4 boneMatrixBuffer[]; };","#elif defined(CPU_SKELETON)","uniform vec3 bonePosition;","#endif","#if defined(UBO_AVAILABLE) || defined(SSBO_SKELETON)","vec3 getBonePosition(in int instanceIdx)","{","int boneMatrixIndex = int(instances[instanceIdx].invMaxDepthBoneMatrixIndexScaleSnapToVert.y);","mat3x4 m = boneMatrixBuffer[boneMatrixIndex];","return vec3 (m[0][3], m[1][3], m[2][3]);","}","#elif defined(CPU_SKELETON)","vec3 getBonePosition(in int instanceIdx) { return bonePosition; }","#else","vec3 getBonePosition(in int instanceIdx) { return vec3(0.0); }","#endif","void main()","{","vec2 vertex = quad01[gl_VertexID];","int instanceIdx = gl_InstanceID;","colorFactor = instances[instanceIdx].vColorFactor;","vec4 positionInterpolationParameter = instances[instanceIdx].positionInterpolationParameter;","texInterpolationParameter = positionInterpolationParameter.w;","vec4 sizeDisplacement = instances[instanceIdx].sizeDisplacement;","vec4 texPositions = instances[instanceIdx].texPositions;","vec4 texSizeSinCos = instances[instanceIdx].texSizeSinCos;","invMaxDepth = instances[instanceIdx].invMaxDepthBoneMatrixIndexScaleSnapToVert.x;","vec2 texSize = texSizeSinCos.xy;","float rSin = texSizeSinCos.z;","float rCos = texSizeSinCos.w;","#ifdef VECTOR_FIELD","rSinCos = texSizeSinCos.zw;","#endif","vec2 size = sizeDisplacement.xy;","vec2 displacement = sizeDisplacement.zw;","vec2 mul = mat2(rCos, -rSin, rSin, rCos) * (vertex - displacement) * size;","vec3 position = positionInterpolationParameter.xyz + getBonePosition(instanceIdx) * instances[instanceIdx].invMaxDepthBoneMatrixIndexScaleSnapToVert.z;","vec3 Y = (instances[instanceIdx].invMaxDepthBoneMatrixIndexScaleSnapToVert.w == 0.0) ? viewMatrixXY[1] : vec3(0.0, 0.0, 1.0);","vec4 pos = vec4(mul.x * viewMatrixXY[0] + mul.y * Y + position, 1.0);","texCoord0 = vertex * texSize + texPositions.xy;","texCoord1 = vertex * texSize + texPositions.zw;","fragCameraDistancePosZ = vec2(distance(pos.xyz, cameraPosition), pos.z);","gl_Position = viewProjectionMatrix * pos;","#ifdef FOG_OF_WAR","fowTc = pos.xy * fowMapScalePosition.xy + fowMapScalePosition.zw;","#endif","}"]}}
