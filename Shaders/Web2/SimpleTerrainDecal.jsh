{"meta":{"feedback_varyings":null,"interface_block_bindings":null,"sampler_default_values":[["decalTex",0],["fogOfWar",6],["heightTex",2]],"shader_parameters":[["fragment","float","angle",1],["vertex","vec3","cameraPosition",1],["fragment","vec4","colorFactor",1],["fragment","sampler2D","decalTex",1],["fragment","vec4","fogColor",1],["fragment","vec2","fogNearFar",1],["fragment","sampler2D","fogOfWar",1],["fragment","float","fowInterpolationParameter",1],["vertex","vec4","fowMapScalePosition",1],["vertex","vec2","heightTerrainScale",1],["vertex","sampler2D","heightTex",1],["vertex","vec2","patchOrigin",1],["fragment","vec3","rotationComponents",1],["vertex","vec2","terrainSize",1],["fragment","vec2","texCenter0",1],["fragment","vec2","texCenter1",1],["fragment","vec4","texFromTo0",1],["fragment","float","texInterpolationParameter",1],["vertex","vec2","texOrigin0",1],["vertex","vec2","texOrigin1",1],["vertex","vec2","texScale",1],["vertex","mat4","viewProjectionMatrix",1],["fragment","vec2","worldTerrainSize",1]],"vertex_attributes":[[0,"vec2","vertexData"]]},"stages":{"fragment":["#version 300 es","precision mediump float;","precision mediump sampler3D;","#define transformFeedback(varName)","#if (__VERSION__ >= 330) || (__VERSION__ == 300)","#define vertAttrib(Num, Type, Name) layout(location = Num) in Type Name","#else","#define vertAttrib(Num, Type, Name) attribute Type Name","#endif","#if __VERSION__ <= 120","#define VAR_SMOOTH_IN(type, name) varying type name","#define VAR_FLAT_IN(type, name) varying type name","#define VAR_SMOOTH_OUT(type, name) varying type name","#define VAR_FLAT_OUT(type, name) varying type name","#define SAMPLE_2D(_smplr, _tc) (texture2D(_smplr, _tc))","#define SAMPLE_2D_GRAD(_smplr, _tc, Fx, Fy) (texture2D(_smplr, _tc))","#define SAMPLE_CUBE(_smplr, _tc) (textureCube(_smplr, _tc))","#else","#define VAR_SMOOTH_IN(type, name) smooth in type name","#define VAR_FLAT_IN(type, name) flat in type name","#define VAR_SMOOTH_OUT(type, name) smooth out type name","#define VAR_FLAT_OUT(type, name) flat out type name","#define SAMPLE_2D(_smplr, _tc) (texture(_smplr, _tc))","#define SAMPLE_2D_GRAD(_smplr, _tc, Fx, Fy) (textureGrad(_smplr, _tc, dFdx(Fx), dFdy(Fy)))","#define SAMPLE_CUBE(_smplr, _tc) (texture(_smplr, _tc))","#endif","#if (__VERSION__ < 130) || defined(NO_RG)","#define NM_XY ra","#else","#define NM_XY rg","#endif","#ifdef FOG_OF_WAR_POSTPROCESS","#define DECLARE_FRAGCOLOR layout(location = 0) out vec4 outFragColor; layout(location = 2) out vec4 outFowBuffer;","#else","#define DECLARE_FRAGCOLOR layout(location = 0) out vec4 outFragColor;","#endif","#define outFragDepth gl_FragDepth","#ifdef FOG","uniform vec2 fogNearFar;","uniform vec4 fogColor;","float getFogFactor(in float zEye)","{","float fogNear = fogNearFar[0];","float fogFar = fogNearFar[1];","return clamp((zEye - fogNear) / (fogFar - fogNear), 0.0, 1.0) * fogColor.a;","}","vec3 addFogFactor(in vec3 color, in float fogFactor)","{","return mix(color, fogColor.rgb, fogFactor);","}","vec3 addFog(in vec3 color, in float zEye)","{","float fogFactor = getFogFactor(zEye);","return addFogFactor(color, fogFactor);","}","#else","float getFogFactor(in float zEye)","{","return 0.0;","}","vec3 addFogFactor(in vec3 color, in float fogFactor)","{","return color;","}","vec3 addFog(in vec3 color, in float zEye)","{","return color;","}","#endif","#ifdef FOG_OF_WAR","uniform sampler2D fogOfWar ;","uniform float fowInterpolationParameter;","float getFogOfWarFactor(in vec2 tc)","{","const float border0 = -0.001;","const float border1 = 1.001;","float clampTo0 = step(border0, tc.x) * (1.0 - step(border1, tc.x)) * step(border0, tc.y) * (1.0 - step(border1, tc.y));","vec2 rg = texture(fogOfWar, tc).rg * clampTo0;","return mix(rg.r, rg.g, fowInterpolationParameter);","}","#else","float getFogOfWarFactor(in vec2 tc) { return 1.0; }","#endif","DECLARE_FRAGCOLOR","uniform sampler2D decalTex ;","uniform float angle;","uniform vec3 rotationComponents;","uniform vec4 texFromTo0;","uniform vec2 texCenter0;","uniform vec2 texCenter1;","uniform vec2 worldTerrainSize;","uniform vec4 colorFactor;","uniform float texInterpolationParameter;","smooth in vec2 texCoord0;","smooth in vec2 texCoord1;","smooth in float fragCameraDistance;","smooth in vec2 worldPosition;","#ifdef FOG_OF_WAR","smooth in vec2 fowTc;","#endif","void main()","{","if (any(lessThanEqual(worldPosition, vec2(0.0))) || any(greaterThanEqual(worldPosition, worldTerrainSize))) discard;","#ifdef OVERDRAW_FULL","outFragColor = vec4(0.1, 0.0, 0.0, 1.0);","#else","mat2 rot = mat2(rotationComponents[0], rotationComponents[1], rotationComponents[2], rotationComponents[0]);","vec2 tcRotate0 = rot * (texCoord0 - texCenter0) + texCenter0;","vec2 tcRotate1 = rot * (texCoord1 - texCenter1) + texCenter1;","if (any(lessThan(tcRotate0, texFromTo0.xy)) || any(greaterThan(tcRotate0, texFromTo0.zw))) discard;","vec4 color = mix(texture(decalTex, tcRotate0), texture(decalTex, tcRotate1), texInterpolationParameter) * colorFactor;","outFragColor = color;","outFragColor.rgb = addFog(outFragColor.rgb, fragCameraDistance);","#ifdef FOG_OF_WAR","float fow = getFogOfWarFactor(fowTc);","outFragColor.rgb *= fow;","#ifdef FOG_OF_WAR_POSTPROCESS","outFowBuffer.ra = vec2(fow, color.a);","#endif","#endif","#ifdef OVERDRAW_ALPHA","outFragColor = vec4(0.1, 0.0, 0.0, 1.0);","#endif","#endif","}"],"vertex":["#version 300 es","precision mediump float;","precision mediump sampler3D;","#define transformFeedback(varName)","#if (__VERSION__ >= 330) || (__VERSION__ == 300)","#define vertAttrib(Num, Type, Name) layout(location = Num) in Type Name","#else","#define vertAttrib(Num, Type, Name) attribute Type Name","#endif","#if __VERSION__ <= 120","#define VAR_SMOOTH_IN(type, name) varying type name","#define VAR_FLAT_IN(type, name) varying type name","#define VAR_SMOOTH_OUT(type, name) varying type name","#define VAR_FLAT_OUT(type, name) varying type name","#define SAMPLE_2D(_smplr, _tc) (texture2D(_smplr, _tc))","#define SAMPLE_2D_GRAD(_smplr, _tc, Fx, Fy) (texture2D(_smplr, _tc))","#define SAMPLE_CUBE(_smplr, _tc) (textureCube(_smplr, _tc))","#else","#define VAR_SMOOTH_IN(type, name) smooth in type name","#define VAR_FLAT_IN(type, name) flat in type name","#define VAR_SMOOTH_OUT(type, name) smooth out type name","#define VAR_FLAT_OUT(type, name) flat out type name","#define SAMPLE_2D(_smplr, _tc) (texture(_smplr, _tc))","#define SAMPLE_2D_GRAD(_smplr, _tc, Fx, Fy) (textureGrad(_smplr, _tc, dFdx(Fx), dFdy(Fy)))","#define SAMPLE_CUBE(_smplr, _tc) (texture(_smplr, _tc))","#endif","#if (__VERSION__ < 130) || defined(NO_RG)","#define NM_XY ra","#else","#define NM_XY rg","#endif","vertAttrib(0, vec2, vertexData);","uniform sampler2D heightTex ;","uniform mat4 viewProjectionMatrix;","uniform vec2 texScale;","uniform vec2 texOrigin0;","uniform vec2 texOrigin1;","uniform vec2 heightTerrainScale;","uniform vec2 patchOrigin;","uniform vec3 cameraPosition;","uniform vec2 terrainSize;","#ifdef FOG_OF_WAR","uniform vec4 fowMapScalePosition;","#endif","#define heightScale heightTerrainScale.x","#define terrainScale heightTerrainScale.y","smooth out vec2 texCoord0;","smooth out vec2 texCoord1;","smooth out float fragCameraDistance;","smooth out vec2 worldPosition;","#ifdef FOG_OF_WAR","smooth out vec2 fowTc;","#endif","void main()","{","vec2 patchPosition = vertexData + patchOrigin;","vec2 vertexTexCoord = (patchPosition + 0.5) / terrainSize;","vec3 position = vec3(patchPosition * terrainScale, texture(heightTex, vertexTexCoord).r * heightScale);","vec2 vertexTexScale = vertexData * texScale;","texCoord0 = vertexTexScale + texOrigin0;","texCoord1 = vertexTexScale + texOrigin1;","worldPosition = position.xy;","gl_Position = viewProjectionMatrix * vec4(position, 1.0);","fragCameraDistance = distance(cameraPosition, position);","#ifdef FOG_OF_WAR","fowTc = position.xy * fowMapScalePosition.xy + fowMapScalePosition.zw;","#endif","}"]}}
