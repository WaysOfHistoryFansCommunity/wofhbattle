{"meta":{"feedback_varyings":null,"interface_block_bindings":null,"sampler_default_values":[["environmentMap",0]],"shader_parameters":[["fragment","samplerCube","environmentMap",1],["vertex","mat3","faceViewMatrix",1],["fragment","float","roughness",1],["fragment","float","sourceCubemapSize",1]],"vertex_attributes":null},"stages":{"fragment":["#version 300 es","precision mediump float;","precision mediump sampler3D;","#define transformFeedback(varName)","#if (__VERSION__ >= 330) || (__VERSION__ == 300)","#define vertAttrib(Num, Type, Name) layout(location = Num) in Type Name","#else","#define vertAttrib(Num, Type, Name) attribute Type Name","#endif","#if __VERSION__ <= 120","#define VAR_SMOOTH_IN(type, name) varying type name","#define VAR_FLAT_IN(type, name) varying type name","#define VAR_SMOOTH_OUT(type, name) varying type name","#define VAR_FLAT_OUT(type, name) varying type name","#define SAMPLE_2D(_smplr, _tc) (texture2D(_smplr, _tc))","#define SAMPLE_2D_GRAD(_smplr, _tc, Fx, Fy) (texture2D(_smplr, _tc))","#define SAMPLE_CUBE(_smplr, _tc) (textureCube(_smplr, _tc))","#else","#define VAR_SMOOTH_IN(type, name) smooth in type name","#define VAR_FLAT_IN(type, name) flat in type name","#define VAR_SMOOTH_OUT(type, name) smooth out type name","#define VAR_FLAT_OUT(type, name) flat out type name","#define SAMPLE_2D(_smplr, _tc) (texture(_smplr, _tc))","#define SAMPLE_2D_GRAD(_smplr, _tc, Fx, Fy) (textureGrad(_smplr, _tc, dFdx(Fx), dFdy(Fy)))","#define SAMPLE_CUBE(_smplr, _tc) (texture(_smplr, _tc))","#endif","#if (__VERSION__ < 130) || defined(NO_RG)","#define NM_XY ra","#else","#define NM_XY rg","#endif","#ifdef FOG_OF_WAR_POSTPROCESS","#define DECLARE_FRAGCOLOR layout(location = 0) out vec4 outFragColor; layout(location = 2) out vec4 outFowBuffer;","#else","#define DECLARE_FRAGCOLOR layout(location = 0) out vec4 outFragColor;","#endif","#define outFragDepth gl_FragDepth","DECLARE_FRAGCOLOR","smooth in vec3 sampleDir;","uniform samplerCube environmentMap ;","uniform float roughness;","uniform float sourceCubemapSize;","#define PI 3.14159265359","float distributionGGX(vec3 N, vec3 H, float roughness)","{","float a = roughness*roughness;","float a2 = a*a;","float NdotH = max(dot(N, H), 0.0);","float NdotH2 = NdotH*NdotH;","float nom   = a2;","float denom = (NdotH2 * (a2 - 1.0) + 1.0);","denom = PI * denom * denom;","return nom / denom;","}","float radicalInverse_VdC(uint bits)","{","bits = (bits << 16u) | (bits >> 16u);","bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);","bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);","bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);","bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);","return float(bits) * 2.3283064365386963e-10;","}","vec2 hammersley(uint i, uint N)","{","return vec2(float(i)/float(N), radicalInverse_VdC(i));","}","vec3 importanceSampleGGX(vec2 Xi, vec3 N, float roughness)","{","float a = roughness*roughness;","float phi = 2.0 * PI * Xi.x;","float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a*a - 1.0) * Xi.y));","float sinTheta = sqrt(1.0 - cosTheta*cosTheta);","vec3 H;","H.x = cos(phi) * sinTheta;","H.y = sin(phi) * sinTheta;","H.z = cosTheta;","vec3 up          = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);","vec3 tangent   = normalize(cross(up, N));","vec3 bitangent = cross(N, tangent);","vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;","return normalize(sampleVec);","}","void main()","{","vec3 N = normalize(sampleDir);","vec3 R = N;","vec3 V = R;","const uint SAMPLE_COUNT = 1024u;","vec3 prefilteredColor = vec3(0.0);","float totalWeight = 0.0;","for(uint i = 0u; i < SAMPLE_COUNT; ++i)","{","vec2 Xi = hammersley(i, SAMPLE_COUNT);","vec3 H = importanceSampleGGX(Xi, N, roughness);","vec3 L  = normalize(2.0 * dot(V, H) * H - V);","float NdotL = max(dot(N, L), 0.0);","if(NdotL > 0.0)","{","float D   = distributionGGX(N, H, roughness);","float NdotH = max(dot(N, H), 0.0);","float HdotV = max(dot(H, V), 0.0);","float pdf = D * NdotH / (4.0 * HdotV) + 0.0001;","float saTexel  = 4.0 * PI / (6.0 * sourceCubemapSize * sourceCubemapSize);","float saSample = 1.0 / (float(SAMPLE_COUNT) * pdf + 0.0001);","float mipLevel = roughness == 0.0 ? 0.0 : 0.5 * log2(saSample / saTexel);","prefilteredColor += textureLod(environmentMap, L, mipLevel).rgb * NdotL;","totalWeight      += NdotL;","}","}","prefilteredColor = prefilteredColor / totalWeight;","outFragColor = vec4(prefilteredColor, 1.0);","}"],"vertex":["#version 300 es","precision mediump float;","precision mediump sampler3D;","#define transformFeedback(varName)","#if (__VERSION__ >= 330) || (__VERSION__ == 300)","#define vertAttrib(Num, Type, Name) layout(location = Num) in Type Name","#else","#define vertAttrib(Num, Type, Name) attribute Type Name","#endif","#if __VERSION__ <= 120","#define VAR_SMOOTH_IN(type, name) varying type name","#define VAR_FLAT_IN(type, name) varying type name","#define VAR_SMOOTH_OUT(type, name) varying type name","#define VAR_FLAT_OUT(type, name) varying type name","#define SAMPLE_2D(_smplr, _tc) (texture2D(_smplr, _tc))","#define SAMPLE_2D_GRAD(_smplr, _tc, Fx, Fy) (texture2D(_smplr, _tc))","#define SAMPLE_CUBE(_smplr, _tc) (textureCube(_smplr, _tc))","#else","#define VAR_SMOOTH_IN(type, name) smooth in type name","#define VAR_FLAT_IN(type, name) flat in type name","#define VAR_SMOOTH_OUT(type, name) smooth out type name","#define VAR_FLAT_OUT(type, name) flat out type name","#define SAMPLE_2D(_smplr, _tc) (texture(_smplr, _tc))","#define SAMPLE_2D_GRAD(_smplr, _tc, Fx, Fy) (textureGrad(_smplr, _tc, dFdx(Fx), dFdy(Fy)))","#define SAMPLE_CUBE(_smplr, _tc) (texture(_smplr, _tc))","#endif","#if (__VERSION__ < 130) || defined(NO_RG)","#define NM_XY ra","#else","#define NM_XY rg","#endif","const vec2 fullscreenQuad[] = vec2[](","vec2(-1.0, -1.0),","vec2(1.0, -1.0),","vec2(1.0, 1.0),","vec2(-1.0, -1.0),","vec2(1.0, 1.0),","vec2(-1.0, 1.0)",");","smooth out vec3 sampleDir;","uniform mat3 faceViewMatrix;","void main()","{","sampleDir = faceViewMatrix * vec3(fullscreenQuad[gl_VertexID], -1.0);","gl_Position = vec4(fullscreenQuad[gl_VertexID], 0.0, 1.0);","}"]}}
