{"meta":{"feedback_varyings":["m0","m1","m2"],"interface_block_bindings":[[0,"Skeleton0"],[1,"Skeleton1"],[2,"Skeleton2"],[3,"Skeleton3"],[4,"Control"]],"sampler_default_values":null,"shader_parameters":[["vertex","float","a0interpolationParameter",1],["vertex","float","a1interpolationParameter",1],["vertex","int","bonesCount",1],["vertex","int","controlIndex",0],["vertex","int","geometryType",1],["vertex","float","interpolationParameter",1],["vertex","int","parents",0]],"vertex_attributes":null},"stages":{"vertex":["#version 300 es","precision mediump float;","precision mediump sampler3D;","#ifndef MAX_BONES","#define MAX_BONES 1","#endif","#define transformFeedback(varName)","#if (__VERSION__ >= 330) || (__VERSION__ == 300)","#define vertAttrib(Num, Type, Name) layout(location = Num) in Type Name","#else","#define vertAttrib(Num, Type, Name) attribute Type Name","#endif","#if __VERSION__ <= 120","#define VAR_SMOOTH_IN(type, name) varying type name","#define VAR_FLAT_IN(type, name) varying type name","#define VAR_SMOOTH_OUT(type, name) varying type name","#define VAR_FLAT_OUT(type, name) varying type name","#define SAMPLE_2D(_smplr, _tc) (texture2D(_smplr, _tc))","#define SAMPLE_2D_GRAD(_smplr, _tc, Fx, Fy) (texture2D(_smplr, _tc))","#define SAMPLE_CUBE(_smplr, _tc) (textureCube(_smplr, _tc))","#else","#define VAR_SMOOTH_IN(type, name) smooth in type name","#define VAR_FLAT_IN(type, name) flat in type name","#define VAR_SMOOTH_OUT(type, name) smooth out type name","#define VAR_FLAT_OUT(type, name) flat out type name","#define SAMPLE_2D(_smplr, _tc) (texture(_smplr, _tc))","#define SAMPLE_2D_GRAD(_smplr, _tc, Fx, Fy) (textureGrad(_smplr, _tc, dFdx(Fx), dFdy(Fy)))","#define SAMPLE_CUBE(_smplr, _tc) (texture(_smplr, _tc))","#endif","#if (__VERSION__ < 130) || defined(NO_RG)","#define NM_XY ra","#else","#define NM_XY rg","#endif","void translate(inout mat4 m, in vec3 v)","{","m[0].xyz += m[0][3] * v;","m[1].xyz += m[1][3] * v;","m[2].xyz += m[2][3] * v;","m[3].xyz += m[3][3] * v;","}","void matrixScale(inout mat4 m, in float s)","{","m[0][0] *= s;","m[0][1] *= s;","m[0][2] *= s;","m[0][3] *= s;","m[1][0] *= s;","m[1][1] *= s;","m[1][2] *= s;","m[1][3] *= s;","m[2][0] *= s;","m[2][1] *= s;","m[2][2] *= s;","m[2][3] *= s;","}","mat3x4 mat34mul(in mat3x4 m1, in mat3x4 m2)","{","mat4 m = mat4(m2[0], m2[1], m2[2], vec4(0.0, 0.0, 0.0, 1.0)) * mat4(m1[0], m1[1], m1[2], vec4(0.0, 0.0, 0.0, 1.0));","return mat3x4(m[0], m[1], m[2]);","}","vec4 quaternionMultiply(in vec4 q1, in vec4 q2)","{","return vec4(cross(q1.xyz, q2.xyz) + q1.w * q2.xyz + q2.w * q1.xyz, q1.w * q2.w - dot(q1.xyz, q2.xyz));","}","mat4 quaternionMatrix4(in vec4 q)","{","float xx = 2.0 * q.x * q.x;","float yy = 2.0 * q.y * q.y;","float zz = 2.0 * q.z * q.z;","float xy = 2.0 * q.x * q.y;","float xz = 2.0 * q.x * q.z;","float yz = 2.0 * q.y * q.z;","float wx = 2.0 * q.w * q.x;","float wy = 2.0 * q.w * q.y;","float wz = 2.0 * q.w * q.z;","return mat4(","1.0 - yy - zz, xy + wz, xz - wy, 0.0,","xy - wz, 1.0 - xx - zz, yz + wx, 0.0,","xz + wy, yz - wx, 1.0 - xx - yy, 0.0,","0.0, 0.0, 0.0, 1.0",");","}","mat3 quaternionMatrix3(in vec4 q)","{","float xx = 2.0 * q.x * q.x;","float yy = 2.0 * q.y * q.y;","float zz = 2.0 * q.z * q.z;","float xy = 2.0 * q.x * q.y;","float xz = 2.0 * q.x * q.z;","float yz = 2.0 * q.y * q.z;","float wx = 2.0 * q.w * q.x;","float wy = 2.0 * q.w * q.y;","float wz = 2.0 * q.w * q.z;","return mat3(","1.0 - yy - zz, xy + wz, xz - wy,","xy - wz, 1.0 - xx - zz, yz + wx,","xz + wy, yz - wx, 1.0 - xx - yy",");","}","vec4 quaternionSlerp(in vec4 qa, in vec4 qb, in float t)","{","float cosHalfTheta = dot(qa, qb);","if (cosHalfTheta >= 0.999999f) return normalize(mix(qa, qb, t));","if (cosHalfTheta <= -0.999999f) return qa;","float halfTheta = acos(cosHalfTheta);","float sinHalfTheta = sqrt(1.0 - cosHalfTheta * cosHalfTheta);","if (abs(sinHalfTheta) < 0.001) return normalize(mix(qa, qb, t));","float ratioA = sin((1.0 - t) * halfTheta) / sinHalfTheta;","float ratioB = sin(t * halfTheta) / sinHalfTheta;","return qa * ratioA + qb * ratioB;","}","layout(std140) uniform Skeleton0","{","vec4 a0f0Attributes[MAX_BONES * 2];","};","layout(std140) uniform Skeleton1","{","vec4 a0f1Attributes[MAX_BONES * 2];","};","layout(std140) uniform Skeleton2","{","vec4 a1f0Attributes[MAX_BONES * 2];","};","layout(std140) uniform Skeleton3","{","vec4 a1f1Attributes[MAX_BONES * 2];","};","layout(std140, row_major) uniform Control","{","mat4x3 controlMatrix[MAX_BONES];","};","uniform int parents[MAX_BONES];","uniform int controlIndex[MAX_BONES];","mat4 toMat4(in mat4x3 mt)","{","return mat4(vec4(mt[0], 0.0), vec4(mt[1], 0.0), vec4(mt[2], 0.0), vec4(mt[3], 1.0));","}","mat4 calcBoneMatrix(in int idx, in float interpolationParameter)","{","int p = parents[idx];","int parentQuatIdx = p * 2;","int parentDsIdx = parentQuatIdx + 1;","int thisQuatIdx = idx * 2;","int thisDsIdx = thisQuatIdx + 1;","vec4 parentQuat0 = a0f0Attributes[parentQuatIdx];","vec4 parentQuat1 = a0f1Attributes[parentQuatIdx];","vec4 parentDs0 = a0f0Attributes[parentDsIdx];","vec4 parentDs1 = a0f1Attributes[parentDsIdx];","vec4 thisQuat0 = a0f0Attributes[thisQuatIdx];","vec4 thisQuat1 = a0f1Attributes[thisQuatIdx];","vec4 thisDs0 = a0f0Attributes[thisDsIdx];","vec4 thisDs1 = a0f1Attributes[thisDsIdx];","mat4 resultParent = quaternionMatrix4(quaternionSlerp(parentQuat0, parentQuat1, interpolationParameter));","matrixScale(resultParent, mix(parentDs0.w, parentDs1.w, interpolationParameter));","if (controlIndex[p] < 255) resultParent = resultParent * toMat4(controlMatrix[controlIndex[p]]);","mat4 result = resultParent * quaternionMatrix4(quaternionSlerp(thisQuat0, thisQuat1, interpolationParameter));","matrixScale(result, mix(thisDs0.w, thisDs1.w, interpolationParameter));","translate(result, mat3(resultParent) * mix(thisDs0.xyz, thisDs1.xyz, interpolationParameter));","if (controlIndex[idx] < 255) result = result * toMat4(controlMatrix[controlIndex[idx]]);","for (int i = 1; p > 0; ++i) {","idx = p;","p = parents[p];","parentQuatIdx = p * 2;","parentDsIdx = parentQuatIdx + 1;","thisQuatIdx = idx * 2;","thisDsIdx = thisQuatIdx + 1;","parentQuat0 = a0f0Attributes[parentQuatIdx];","parentQuat1 = a0f1Attributes[parentQuatIdx];","parentDs0 = a0f0Attributes[parentDsIdx];","parentDs1 = a0f1Attributes[parentDsIdx];","thisQuat0 = a0f0Attributes[thisQuatIdx];","thisQuat1 = a0f1Attributes[thisQuatIdx];","thisDs0 = a0f0Attributes[thisDsIdx];","thisDs1 = a0f1Attributes[thisDsIdx];","resultParent = quaternionMatrix4(quaternionSlerp(parentQuat0, parentQuat1, interpolationParameter));","matrixScale(resultParent, mix(parentDs0.w, parentDs1.w, interpolationParameter));","if (controlIndex[p] < 255) resultParent = resultParent * toMat4(controlMatrix[controlIndex[p]]);","result = resultParent * result;","translate(result, mat3(resultParent) * mix(thisDs0.xyz, thisDs1.xyz, interpolationParameter));","}","return result;","}","uniform float a0interpolationParameter;","uniform float a1interpolationParameter;","mat4 calcBoneMatrixDouble(in int idx, in float interpolationParameter)","{","int p = parents[idx];","int parentQuatIdx = p * 2;","int parentDsIdx = parentQuatIdx + 1;","int thisQuatIdx = idx * 2;","int thisDsIdx = thisQuatIdx + 1;","vec4 q0 = quaternionSlerp(a0f0Attributes[parentQuatIdx], a0f1Attributes[parentQuatIdx], a0interpolationParameter);","vec4 q1 = quaternionSlerp(a1f0Attributes[parentQuatIdx], a1f1Attributes[parentQuatIdx], a1interpolationParameter);","if (dot(q0, q1) < 0.0) q0 = -q0;","mat4 resultParent = quaternionMatrix4(quaternionSlerp(q0, q1, interpolationParameter));","float s0 = mix(a0f0Attributes[parentDsIdx].w, a0f1Attributes[parentDsIdx].w, a0interpolationParameter);","float s1 = mix(a1f0Attributes[parentDsIdx].w, a1f1Attributes[parentDsIdx].w, a1interpolationParameter);","matrixScale(resultParent, mix(s0, s1, interpolationParameter));","if (controlIndex[p] < 255) resultParent = resultParent * toMat4(controlMatrix[controlIndex[p]]);","q0 = quaternionSlerp(a0f0Attributes[thisQuatIdx], a0f1Attributes[thisQuatIdx], a0interpolationParameter);","q1 = quaternionSlerp(a1f0Attributes[thisQuatIdx], a1f1Attributes[thisQuatIdx], a1interpolationParameter);","if (dot(q0, q1) < 0.0) q0 = -q0;","mat4 result = resultParent * quaternionMatrix4(quaternionSlerp(q0, q1, interpolationParameter));","s0 = mix(a0f0Attributes[thisDsIdx].w, a0f1Attributes[thisDsIdx].w, a0interpolationParameter);","s1 = mix(a1f0Attributes[thisDsIdx].w, a1f1Attributes[thisDsIdx].w, a1interpolationParameter);","matrixScale(result, mix(s0, s1, interpolationParameter));","vec3 d0 = mix(a0f0Attributes[thisDsIdx].xyz, a0f1Attributes[thisDsIdx].xyz, a0interpolationParameter);","vec3 d1 = mix(a1f0Attributes[thisDsIdx].xyz, a1f1Attributes[thisDsIdx].xyz, a1interpolationParameter);","translate(result, mat3(resultParent) * mix(d0, d1, interpolationParameter));","if (controlIndex[idx] < 255) result = result * toMat4(controlMatrix[controlIndex[idx]]);","for (int i = 1; p > 0; ++i) {","idx = p;","p = parents[p];","parentQuatIdx = p * 2;","parentDsIdx = parentQuatIdx + 1;","thisQuatIdx = idx * 2;","thisDsIdx = thisQuatIdx + 1;","q0 = quaternionSlerp(a0f0Attributes[parentQuatIdx], a0f1Attributes[parentQuatIdx], a0interpolationParameter);","q1 = quaternionSlerp(a1f0Attributes[parentQuatIdx], a1f1Attributes[parentQuatIdx], a1interpolationParameter);","if (dot(q0, q1) < 0.0) q0 = -q0;","resultParent = quaternionMatrix4(quaternionSlerp(q0, q1, interpolationParameter));","s0 = mix(a0f0Attributes[parentDsIdx].w, a0f1Attributes[parentDsIdx].w, a0interpolationParameter);","s1 = mix(a1f0Attributes[parentDsIdx].w, a1f1Attributes[parentDsIdx].w, a1interpolationParameter);","matrixScale(resultParent, mix(s0, s1, interpolationParameter));","if (controlIndex[p] < 255) resultParent = resultParent * toMat4(controlMatrix[controlIndex[p]]);","result = resultParent * result;","d0 = mix(a0f0Attributes[thisDsIdx].xyz, a0f1Attributes[thisDsIdx].xyz, a0interpolationParameter);","d1 = mix(a1f0Attributes[thisDsIdx].xyz, a1f1Attributes[thisDsIdx].xyz, a1interpolationParameter);","translate(result, mat3(resultParent) * mix(d0, d1, interpolationParameter));","}","return result;","}","flat out vec4 m0;","flat out vec4 m1;","flat out vec4 m2;","transformFeedback(m0)","transformFeedback(m1)","transformFeedback(m2)","uniform int bonesCount;","uniform float interpolationParameter;","#define GEOM_SKELETAL 3","#define GEOM_SKELETAL_INTERANIMATION 4","uniform int geometryType;","void main() {","int boneId = min(bonesCount - 1, gl_VertexID);","mat4 outBoneMatrix;","switch (geometryType) {","case GEOM_SKELETAL:","outBoneMatrix = calcBoneMatrix(boneId + 1, interpolationParameter);","break;","case GEOM_SKELETAL_INTERANIMATION:","outBoneMatrix = calcBoneMatrixDouble(boneId + 1, interpolationParameter);","break;","default:","outBoneMatrix = mat4(1.0);","}","outBoneMatrix = transpose(outBoneMatrix);","m0 = outBoneMatrix[0];","m1 = outBoneMatrix[1];","m2 = outBoneMatrix[2];","}"]}}
