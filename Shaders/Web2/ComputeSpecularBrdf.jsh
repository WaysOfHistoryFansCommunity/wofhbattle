{"meta":{"feedback_varyings":null,"interface_block_bindings":null,"sampler_default_values":null,"shader_parameters":null,"vertex_attributes":null},"stages":{"fragment":["#version 300 es","precision mediump float;","precision mediump sampler3D;","#define transformFeedback(varName)","#if (__VERSION__ >= 330) || (__VERSION__ == 300)","#define vertAttrib(Num, Type, Name) layout(location = Num) in Type Name","#else","#define vertAttrib(Num, Type, Name) attribute Type Name","#endif","#if __VERSION__ <= 120","#define VAR_SMOOTH_IN(type, name) varying type name","#define VAR_FLAT_IN(type, name) varying type name","#define VAR_SMOOTH_OUT(type, name) varying type name","#define VAR_FLAT_OUT(type, name) varying type name","#define SAMPLE_2D(_smplr, _tc) (texture2D(_smplr, _tc))","#define SAMPLE_2D_GRAD(_smplr, _tc, Fx, Fy) (texture2D(_smplr, _tc))","#define SAMPLE_CUBE(_smplr, _tc) (textureCube(_smplr, _tc))","#else","#define VAR_SMOOTH_IN(type, name) smooth in type name","#define VAR_FLAT_IN(type, name) flat in type name","#define VAR_SMOOTH_OUT(type, name) smooth out type name","#define VAR_FLAT_OUT(type, name) flat out type name","#define SAMPLE_2D(_smplr, _tc) (texture(_smplr, _tc))","#define SAMPLE_2D_GRAD(_smplr, _tc, Fx, Fy) (textureGrad(_smplr, _tc, dFdx(Fx), dFdy(Fy)))","#define SAMPLE_CUBE(_smplr, _tc) (texture(_smplr, _tc))","#endif","#if (__VERSION__ < 130) || defined(NO_RG)","#define NM_XY ra","#else","#define NM_XY rg","#endif","smooth in vec2 texCoord;","layout(location = 0) out vec4 outValues;","#define PI 3.14159265359","float geometrySchlickGGX(in float NdotV, in float roughness)","{","float a = roughness;","float k = (a * a) / 2.0;","float nom   = NdotV;","float denom = NdotV * (1.0 - k) + k;","return nom / denom;","}","float geometrySmith(in vec3 N, in vec3 V, in vec3 L, in float roughness)","{","float NdotV = max(dot(N, V), 0.0);","float NdotL = max(dot(N, L), 0.0);","float ggx2 = geometrySchlickGGX(NdotV, roughness);","float ggx1 = geometrySchlickGGX(NdotL, roughness);","return ggx1 * ggx2;","}","float radicalInverseVdC(in uint bits)","{","bits = (bits << 16u) | (bits >> 16u);","bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);","bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);","bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);","bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);","return float(bits) * 2.3283064365386963e-10;","}","vec2 hammersley(in uint i, in uint N)","{","return vec2(float(i)/float(N), radicalInverseVdC(i));","}","vec3 importanceSampleGGX(in vec2 Xi, in vec3 N, in float roughness)","{","float a = roughness*roughness;","float phi = 2.0 * PI * Xi.x;","float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a*a - 1.0) * Xi.y));","float sinTheta = sqrt(1.0 - cosTheta*cosTheta);","vec3 H;","H.x = cos(phi) * sinTheta;","H.y = sin(phi) * sinTheta;","H.z = cosTheta;","vec3 up        = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);","vec3 tangent   = normalize(cross(up, N));","vec3 bitangent = cross(N, tangent);","vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;","return normalize(sampleVec);","}","vec2 integrateBrdf(in float NdotV, in float roughness)","{","vec3 V;","V.x = sqrt(1.0 - NdotV*NdotV);","V.y = 0.0;","V.z = NdotV;","float A = 0.0;","float B = 0.0;","vec3 N = vec3(0.0, 0.0, 1.0);","const uint SAMPLE_COUNT = 1024u;","for (uint i = 0u; i < SAMPLE_COUNT; ++i)","{","vec2 Xi = hammersley(i, SAMPLE_COUNT);","vec3 H  = importanceSampleGGX(Xi, N, roughness);","vec3 L  = normalize(2.0 * dot(V, H) * H - V);","float NdotL = max(L.z, 0.0);","float NdotH = max(H.z, 0.0);","float VdotH = max(dot(V, H), 0.0);","if (NdotL > 0.0)","{","float G = geometrySmith(N, V, L, roughness);","float G_Vis = (G * VdotH) / (NdotH * NdotV);","float Fc = pow(1.0 - VdotH, 5.0);","A += (1.0 - Fc) * G_Vis;","B += Fc * G_Vis;","}","}","A /= float(SAMPLE_COUNT);","B /= float(SAMPLE_COUNT);","return vec2(A, B);","}","void main()","{","vec2 brdf = integrateBrdf(texCoord.x, texCoord.y);","outValues = vec4(brdf, 0.0, 1.0);","}"],"vertex":["#version 300 es","precision mediump float;","precision mediump sampler3D;","#define transformFeedback(varName)","#if (__VERSION__ >= 330) || (__VERSION__ == 300)","#define vertAttrib(Num, Type, Name) layout(location = Num) in Type Name","#else","#define vertAttrib(Num, Type, Name) attribute Type Name","#endif","#if __VERSION__ <= 120","#define VAR_SMOOTH_IN(type, name) varying type name","#define VAR_FLAT_IN(type, name) varying type name","#define VAR_SMOOTH_OUT(type, name) varying type name","#define VAR_FLAT_OUT(type, name) varying type name","#define SAMPLE_2D(_smplr, _tc) (texture2D(_smplr, _tc))","#define SAMPLE_2D_GRAD(_smplr, _tc, Fx, Fy) (texture2D(_smplr, _tc))","#define SAMPLE_CUBE(_smplr, _tc) (textureCube(_smplr, _tc))","#else","#define VAR_SMOOTH_IN(type, name) smooth in type name","#define VAR_FLAT_IN(type, name) flat in type name","#define VAR_SMOOTH_OUT(type, name) smooth out type name","#define VAR_FLAT_OUT(type, name) flat out type name","#define SAMPLE_2D(_smplr, _tc) (texture(_smplr, _tc))","#define SAMPLE_2D_GRAD(_smplr, _tc, Fx, Fy) (textureGrad(_smplr, _tc, dFdx(Fx), dFdy(Fy)))","#define SAMPLE_CUBE(_smplr, _tc) (texture(_smplr, _tc))","#endif","#if (__VERSION__ < 130) || defined(NO_RG)","#define NM_XY ra","#else","#define NM_XY rg","#endif","const vec2 fullscreenQuad[] = vec2[](","vec2(-1.0, -1.0),","vec2(1.0, -1.0),","vec2(1.0, 1.0),","vec2(-1.0, -1.0),","vec2(1.0, 1.0),","vec2(-1.0, 1.0)",");","const vec2 quad01[] = vec2[](","vec2(0.0, 0.0),","vec2(1.0, 0.0),","vec2(1.0, 1.0),","vec2(0.0, 0.0),","vec2(1.0, 1.0),","vec2(0.0, 1.0)",");","VAR_SMOOTH_OUT(vec2, texCoord);","void main()","{","texCoord = quad01[gl_VertexID];","gl_Position = vec4(fullscreenQuad[gl_VertexID], 0.0, 1.0);","}"]}}
