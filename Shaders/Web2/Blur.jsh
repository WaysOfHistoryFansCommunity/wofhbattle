{"meta":{"feedback_varyings":null,"interface_block_bindings":null,"sampler_default_values":[["colorTex",0]],"shader_parameters":[["fragment","sampler2D","colorTex",1],["fragment","bool","horizontal",1],["fragment","float","texelSize",1]],"vertex_attributes":null},"stages":{"fragment":["#version 300 es","precision mediump float;","precision mediump sampler3D;","#define transformFeedback(varName)","#if (__VERSION__ >= 330) || (__VERSION__ == 300)","#define vertAttrib(Num, Type, Name) layout(location = Num) in Type Name","#else","#define vertAttrib(Num, Type, Name) attribute Type Name","#endif","#if __VERSION__ <= 120","#define VAR_SMOOTH_IN(type, name) varying type name","#define VAR_FLAT_IN(type, name) varying type name","#define VAR_SMOOTH_OUT(type, name) varying type name","#define VAR_FLAT_OUT(type, name) varying type name","#define SAMPLE_2D(_smplr, _tc) (texture2D(_smplr, _tc))","#define SAMPLE_2D_GRAD(_smplr, _tc, Fx, Fy) (texture2D(_smplr, _tc))","#define SAMPLE_CUBE(_smplr, _tc) (textureCube(_smplr, _tc))","#else","#define VAR_SMOOTH_IN(type, name) smooth in type name","#define VAR_FLAT_IN(type, name) flat in type name","#define VAR_SMOOTH_OUT(type, name) smooth out type name","#define VAR_FLAT_OUT(type, name) flat out type name","#define SAMPLE_2D(_smplr, _tc) (texture(_smplr, _tc))","#define SAMPLE_2D_GRAD(_smplr, _tc, Fx, Fy) (textureGrad(_smplr, _tc, dFdx(Fx), dFdy(Fy)))","#define SAMPLE_CUBE(_smplr, _tc) (texture(_smplr, _tc))","#endif","#if (__VERSION__ < 130) || defined(NO_RG)","#define NM_XY ra","#else","#define NM_XY rg","#endif","uniform sampler2D colorTex ;","uniform float texelSize;","uniform bool horizontal;","smooth in vec2 texCoord;","const float weights[5] = float[5](0.227027, 0.1945946, 0.1216216, 0.054054, 0.016216);","layout(location = 0) out vec4 outFragColor;","void main()","{","vec4 color = texture(colorTex, texCoord) * weights[0];","if (horizontal) {","for (int i = 1; i < weights.length(); ++i) {","color += texture(colorTex, texCoord + vec2(texelSize * float(i), 0.0)) * weights[i];","color += texture(colorTex, texCoord - vec2(texelSize * float(i), 0.0)) * weights[i];","}","} else {","for (int i = 1; i < weights.length(); ++i) {","color += texture(colorTex, texCoord + vec2(0.0, texelSize * float(i))) * weights[i];","color += texture(colorTex, texCoord - vec2(0.0, texelSize * float(i))) * weights[i];","}","}","outFragColor = color;","}"],"vertex":["#version 300 es","precision mediump float;","precision mediump sampler3D;","#define transformFeedback(varName)","#if (__VERSION__ >= 330) || (__VERSION__ == 300)","#define vertAttrib(Num, Type, Name) layout(location = Num) in Type Name","#else","#define vertAttrib(Num, Type, Name) attribute Type Name","#endif","#if __VERSION__ <= 120","#define VAR_SMOOTH_IN(type, name) varying type name","#define VAR_FLAT_IN(type, name) varying type name","#define VAR_SMOOTH_OUT(type, name) varying type name","#define VAR_FLAT_OUT(type, name) varying type name","#define SAMPLE_2D(_smplr, _tc) (texture2D(_smplr, _tc))","#define SAMPLE_2D_GRAD(_smplr, _tc, Fx, Fy) (texture2D(_smplr, _tc))","#define SAMPLE_CUBE(_smplr, _tc) (textureCube(_smplr, _tc))","#else","#define VAR_SMOOTH_IN(type, name) smooth in type name","#define VAR_FLAT_IN(type, name) flat in type name","#define VAR_SMOOTH_OUT(type, name) smooth out type name","#define VAR_FLAT_OUT(type, name) flat out type name","#define SAMPLE_2D(_smplr, _tc) (texture(_smplr, _tc))","#define SAMPLE_2D_GRAD(_smplr, _tc, Fx, Fy) (textureGrad(_smplr, _tc, dFdx(Fx), dFdy(Fy)))","#define SAMPLE_CUBE(_smplr, _tc) (texture(_smplr, _tc))","#endif","#if (__VERSION__ < 130) || defined(NO_RG)","#define NM_XY ra","#else","#define NM_XY rg","#endif","const vec2 fullscreenQuad[] = vec2[](","vec2(-1.0, -1.0),","vec2(1.0, -1.0),","vec2(1.0, 1.0),","vec2(-1.0, -1.0),","vec2(1.0, 1.0),","vec2(-1.0, 1.0)",");","const vec2 quad01[] = vec2[](","vec2(0.0, 0.0),","vec2(1.0, 0.0),","vec2(1.0, 1.0),","vec2(0.0, 0.0),","vec2(1.0, 1.0),","vec2(0.0, 1.0)",");","VAR_SMOOTH_OUT(vec2, texCoord);","void main()","{","texCoord = quad01[gl_VertexID];","gl_Position = vec4(fullscreenQuad[gl_VertexID], 0.0, 1.0);","}"]}}
