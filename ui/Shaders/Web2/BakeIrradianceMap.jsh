{"meta":{"feedback_varyings":null,"interface_block_bindings":null,"sampler_default_values":[["environmentMap",0]],"shader_parameters":[["fragment","samplerCube","environmentMap",1],["vertex","mat3","faceViewMatrix",1]],"vertex_attributes":null},"stages":{"fragment":["#version 300 es","precision mediump float;","precision mediump sampler3D;","#define transformFeedback(varName)","#if (__VERSION__ >= 330) || (__VERSION__ == 300)","#define vertAttrib(Num, Type, Name) layout(location = Num) in Type Name","#else","#define vertAttrib(Num, Type, Name) attribute Type Name","#endif","#if __VERSION__ <= 120","#define VAR_SMOOTH_IN(type, name) varying type name","#define VAR_FLAT_IN(type, name) varying type name","#define VAR_SMOOTH_OUT(type, name) varying type name","#define VAR_FLAT_OUT(type, name) varying type name","#define SAMPLE_2D(_smplr, _tc) (texture2D(_smplr, _tc))","#define SAMPLE_2D_GRAD(_smplr, _tc, Fx, Fy) (texture2D(_smplr, _tc))","#define SAMPLE_CUBE(_smplr, _tc) (textureCube(_smplr, _tc))","#else","#define VAR_SMOOTH_IN(type, name) smooth in type name","#define VAR_FLAT_IN(type, name) flat in type name","#define VAR_SMOOTH_OUT(type, name) smooth out type name","#define VAR_FLAT_OUT(type, name) flat out type name","#define SAMPLE_2D(_smplr, _tc) (texture(_smplr, _tc))","#define SAMPLE_2D_GRAD(_smplr, _tc, Fx, Fy) (textureGrad(_smplr, _tc, dFdx(Fx), dFdy(Fy)))","#define SAMPLE_CUBE(_smplr, _tc) (texture(_smplr, _tc))","#endif","#if (__VERSION__ < 130) || defined(NO_RG)","#define NM_XY ra","#else","#define NM_XY rg","#endif","#ifdef FOG_OF_WAR_POSTPROCESS","#define DECLARE_FRAGCOLOR layout(location = 0) out vec4 outFragColor; layout(location = 2) out vec4 outFowBuffer;","#else","#define DECLARE_FRAGCOLOR layout(location = 0) out vec4 outFragColor;","#endif","#define outFragDepth gl_FragDepth","DECLARE_FRAGCOLOR","smooth in vec3 sampleDir;","uniform samplerCube environmentMap ;","#define PI 3.14159265359","void main()","{","vec3 N = normalize(sampleDir);","vec3 up = vec3(0.0, 1.0, 0.0);","vec3 right = normalize(cross(up, N));","up = normalize(cross(N, right));","float sampleDelta = 0.025;","float nrSamples = 0.0;","vec3 irradiance = vec3(0.0);","for (float phi = 0.0; phi < 2.0 * PI; phi += sampleDelta)","{","for (float theta = 0.0; theta < 0.5 * PI; theta += sampleDelta)","{","vec3 tangentSample = vec3(sin(theta) * cos(phi),  sin(theta) * sin(phi), cos(theta));","vec3 sampleVec = tangentSample.x * right + tangentSample.y * up + tangentSample.z * N;","irradiance += texture(environmentMap, sampleVec).rgb * cos(theta) * sin(theta);","nrSamples++;","}","}","irradiance = PI * irradiance * (1.0 / float(nrSamples));","outFragColor = vec4(irradiance, 1.0);","}"],"vertex":["#version 300 es","precision mediump float;","precision mediump sampler3D;","#define transformFeedback(varName)","#if (__VERSION__ >= 330) || (__VERSION__ == 300)","#define vertAttrib(Num, Type, Name) layout(location = Num) in Type Name","#else","#define vertAttrib(Num, Type, Name) attribute Type Name","#endif","#if __VERSION__ <= 120","#define VAR_SMOOTH_IN(type, name) varying type name","#define VAR_FLAT_IN(type, name) varying type name","#define VAR_SMOOTH_OUT(type, name) varying type name","#define VAR_FLAT_OUT(type, name) varying type name","#define SAMPLE_2D(_smplr, _tc) (texture2D(_smplr, _tc))","#define SAMPLE_2D_GRAD(_smplr, _tc, Fx, Fy) (texture2D(_smplr, _tc))","#define SAMPLE_CUBE(_smplr, _tc) (textureCube(_smplr, _tc))","#else","#define VAR_SMOOTH_IN(type, name) smooth in type name","#define VAR_FLAT_IN(type, name) flat in type name","#define VAR_SMOOTH_OUT(type, name) smooth out type name","#define VAR_FLAT_OUT(type, name) flat out type name","#define SAMPLE_2D(_smplr, _tc) (texture(_smplr, _tc))","#define SAMPLE_2D_GRAD(_smplr, _tc, Fx, Fy) (textureGrad(_smplr, _tc, dFdx(Fx), dFdy(Fy)))","#define SAMPLE_CUBE(_smplr, _tc) (texture(_smplr, _tc))","#endif","#if (__VERSION__ < 130) || defined(NO_RG)","#define NM_XY ra","#else","#define NM_XY rg","#endif","const vec2 fullscreenQuad[] = vec2[](","vec2(-1.0, -1.0),","vec2(1.0, -1.0),","vec2(1.0, 1.0),","vec2(-1.0, -1.0),","vec2(1.0, 1.0),","vec2(-1.0, 1.0)",");","smooth out vec3 sampleDir;","uniform mat3 faceViewMatrix;","void main()","{","sampleDir = faceViewMatrix * vec3(fullscreenQuad[gl_VertexID], -1.0);","gl_Position = vec4(fullscreenQuad[gl_VertexID], 0.0, 1.0);","}"]}}
